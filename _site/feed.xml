<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The journey of a restless mind</title>
    <description>A personal blog about my experience as a resident apprentice at 8th Light
</description>
    <link>http://demonh3x.github.io//</link>
    <atom:link href="http://demonh3x.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 16 May 2015 18:26:56 +0100</pubDate>
    <lastBuildDate>Sat, 16 May 2015 18:26:56 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Journal - week 15th May</title>
        <description>&lt;h2 id=&quot;monday-11th&quot;&gt;Monday 11th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Planned what steps to take to create a gem for tic-tac-toe.&lt;/li&gt;
  &lt;li&gt;Look for information about how to make gems.&lt;/li&gt;
  &lt;li&gt;Created a .gemspec for tic-tac-toe.&lt;/li&gt;
  &lt;li&gt;Reorganized modules and files to separate tic-tac-toe in three repositories: Core, CLI, GUI.&lt;/li&gt;
  &lt;li&gt;Had some problems after renaming github repository for core.&lt;/li&gt;
  &lt;li&gt;Created github repositories for CLI and GUI.&lt;/li&gt;
  &lt;li&gt;Configured Travis for CLI and GUI.&lt;/li&gt;
  &lt;li&gt;Added codeclimate for CLI and GUI.&lt;/li&gt;
  &lt;li&gt;Lost time because I installed the core gem and then I was refactoring the core gem. And any failures were not being detected because the tests were loading the gem’s classes.&lt;/li&gt;
  &lt;li&gt;Talked with Skim and other colleagues about git branching strategies.&lt;/li&gt;
  &lt;li&gt;Wondered about creating gems for CLI/GUI. Conclusion: They are not libraries to consume, they are binaries to execute.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Published &lt;a href=&quot;/8thlight/2015/05/11/blocking-calls-and-uis-iii.html&quot;&gt;Blocking calls and UIs III&lt;/a&gt; that I wrote over the weekend.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tuesday-12th&quot;&gt;Tuesday 12th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 9-10 hours.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Planned what steps to take to have similar user experience in GUI and CLI.&lt;/li&gt;
  &lt;li&gt;Yak shaved: created git shortcuts for most used commands.&lt;/li&gt;
  &lt;li&gt;Added tests for the option to play again: got a bit stuck on asserting that the windows were showing and hiding because the windows were always hidden in tests.&lt;/li&gt;
  &lt;li&gt;Tried branching out each small task. Conclusion: too small tasks are a headache, story-size branches seem good.&lt;/li&gt;
  &lt;li&gt;When had something that might be enough, asked for the client’s feedback.&lt;/li&gt;
  &lt;li&gt;Talked a bit with Sam about Ruby: protected, public, private, modules vs inheritance, class instance variables vs instance variables.&lt;/li&gt;
  &lt;li&gt;Tried to add bundler cache in Travis to reduce the time of GUI integration, it did not work because the gem was installed manually and bundler did not find it.&lt;/li&gt;
  &lt;li&gt;Started refactoring GUI.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;At home, wrote &lt;a href=&quot;/8thlight/2015/05/12/sleep.html&quot;&gt;Sleep&lt;/a&gt; post and published it.&lt;/li&gt;
  &lt;li&gt;Felipe proposed to pair for a bit, we started changing inheritance for composition and adding a generic layer for any GUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wednesday-13th&quot;&gt;Wednesday 13th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;Finished reading XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Did standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Moved specific GUI widget details to a factory.&lt;/li&gt;
  &lt;li&gt;Separated GUI widgets in different files.&lt;/li&gt;
  &lt;li&gt;Because the GUI tests depended on Qt framework, I had to change the entry point to access Qt classes a lot of times.&lt;/li&gt;
  &lt;li&gt;Generalized GUI widget APIs.&lt;/li&gt;
  &lt;li&gt;Talked with Skim about the current refactoring state and the simplest way to detach the UI framework.&lt;/li&gt;
  &lt;li&gt;Had idea for a blog post: setter methods for configuration instead of constructor arguments may help the refactoring stage.&lt;/li&gt;
  &lt;li&gt;At home, wrote &lt;a href=&quot;/8thlight/2015/05/13/diffuse-mode.html&quot;&gt;Diffuse mode&lt;/a&gt; post and published it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thursday-14th&quot;&gt;Thursday 14th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;Started reading Clean Code in the bus.&lt;/li&gt;
  &lt;li&gt;Planned what steps to take to finish the refactor.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Reinforced my feeling on setter methods over constructor arguments in the refactoring stage because simplified moving things around.&lt;/li&gt;
  &lt;li&gt;Found a strange thing in the refactoring that felt like a smell: class with no public methods. It was only registering events in the constructor to call the logic and update the display.&lt;/li&gt;
  &lt;li&gt;That made me wonder about refactoring towards something like &lt;code&gt;events (input)&lt;/code&gt; -&amp;gt; &lt;code&gt;logic&lt;/code&gt; -&amp;gt; &lt;code&gt;display (output)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Had a conversation with Skim about that idea and what approach to focus on. Difficult to separate events from representation because in Qt they are tied together inside the widgets. And decided to have &lt;code&gt;common Window objects&lt;/code&gt; -use-&amp;gt; &lt;code&gt;specific GUI objects&lt;/code&gt; -use-&amp;gt; &lt;code&gt;Qt widgets&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A lot of refactoring.&lt;/li&gt;
  &lt;li&gt;Useful things in the refactoring:
    &lt;ul&gt;
      &lt;li&gt;setter methods instead of constructor arguments.&lt;/li&gt;
      &lt;li&gt;integration tests (although had to change after most of the refactorings)&lt;/li&gt;
      &lt;li&gt;changing modification of instance variables for arguments and return values.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;friday-15th&quot;&gt;Friday 15th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Gave advice to Priya about nervousness in giving talks.&lt;/li&gt;
  &lt;li&gt;Had IPM with Skim:
    &lt;ul&gt;
      &lt;li&gt;Delivered stories: good.&lt;/li&gt;
      &lt;li&gt;Code review: need to do a lot of small improvements, inconsistencies and simplifications.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Did the estimations again without having to give an immediate answer. Again, it felt comfortable and quite precise.&lt;/li&gt;
  &lt;li&gt;We assisted to a talk from Priya on Unix Processes and then another about the impostor syndrome from Daniel and Enrique.&lt;/li&gt;
  &lt;li&gt;Had a meeting about improving and concerns.&lt;/li&gt;
  &lt;li&gt;Had a small conversation with Uku about doing a free self-organized open-space similar to socrates conference.&lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 16 May 2015 22:30:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/16/journal-15th-may.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/16/journal-15th-may.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Diffuse mode</title>
        <description>&lt;p&gt;It happens that when we are focused in a topic, we lose the ability to see it in a different way.
You may know the technique of &lt;code&gt;having a shower&lt;/code&gt; or &lt;code&gt;going for a walk&lt;/code&gt; to get a fresh point of view. I have been involved in conversations about that topic quite frequently. &lt;a href=&quot;http://www.barbaraoakley.com/&quot;&gt;Barbara Oakley&lt;/a&gt; explains &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/23&quot;&gt;the following&lt;/a&gt; &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/21&quot;&gt;about it&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Researchers have found that we have two fundamentally different modes of thinking, here I&#39;ll call them the Focused and Diffuse mode. We are either in the Focused mode or in the Diffuse mode of thinking. It seems you can&#39;t be at both ways of thinking modes at the same time.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When we are in the Focused mode, our brains work in constrained zones to maximize the amount of energy spent on an area of knowledge and/or abilities.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The Focused mode, in some sense, is like if the thought is traveling along a familiar, nicely-paved road. But what if the problem you are working on needs new ideas or approaches, concepts that you haven&#39;t thought of before.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Those may need you to activate a different zone on your brain. &lt;code&gt;But if you haven&#39;t had that thought before, you don&#39;t even know where it is. How are we going to reach there in the first place?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;In the Diffuse mode of thinking you can look at things broadly. You can make new neural connections traveling along new pathways.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To activate the diffuse mode, &lt;code&gt;Salvador Dali would relax in his chair and let his mind go free. He&#39;d had a key in his hand and as he would slip into his dreams, falling asleep, the key would fall from his hand and the clatter would wake him up. Just in time so he could gather up those thoughts and ideas in his mind and off he&#39;d go back into the focused mode, bringing with him the new connections he made while in the diffuse mode.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;According to legend, Thomas Edison would do something similar.&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/13/diffuse-mode.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/13/diffuse-mode.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Sleep</title>
        <description>&lt;p&gt;If you have read &lt;a href=&quot;/8thlight/2015/05/08/journal-8th-may.html&quot;&gt;my first journal post&lt;/a&gt;, you may have noticed that I wrote the amount of sleep I had each day. 
You may have noticed also that it sometimes is more than expected from an adult, around 9-10 hours.&lt;/p&gt;

&lt;p&gt;I’m trying lately to sleep as much as my body needs. I’m trying to wake up by myself and not because an alarm is sounding on my phone. I don’t always achieve it. Sometimes I go to sleep too late and the alarm ends up waking me up.&lt;/p&gt;

&lt;p&gt;You may wonder why. I’m going to use some quotes from a very concise &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/25&quot;&gt;lecture&lt;/a&gt; from &lt;a href=&quot;http://www.barbaraoakley.com/&quot;&gt;Dr. Barbara Oakley&lt;/a&gt; in a MOOC called &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/25&quot;&gt;Learning How to Learn: Powerful mental tools to help you master tough subjects&lt;/a&gt; to respond to that:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sleep, which can sometimes seem like such a waste of time, is actually your brain&#39;s way of keeping clean and healthy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sleep is actually an important part of the memory and learning process&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sleep has also been shown to make a remarkable difference in your ability to figure out difficult problems and to understand what you are trying to learn&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/12/sleep.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/12/sleep.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Blocking calls and UIs III</title>
        <description>&lt;p&gt;In the &lt;a href=&quot;/8thlight/2015/05/07/blocking-calls-and-uis-ii.html&quot;&gt;previous post&lt;/a&gt; we solved the &lt;code&gt;human vs human&lt;/code&gt; usage. Let’s face the &lt;code&gt;computer vs computer&lt;/code&gt; usage now. I’m choosing &lt;code&gt;computer vs computer&lt;/code&gt; after &lt;code&gt;human vs human&lt;/code&gt; because it is simpler than introducing &lt;code&gt;computer vs human&lt;/code&gt; directly. If we did that, we would have to think how to do the computer and also how we interleave computer and human. By doing &lt;code&gt;computer vs computer&lt;/code&gt; first, we are deferring the interleaving complexity for now.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;computer vs computer&lt;/code&gt;: the user does not input anything, he/she sees the change that the first computer makes. Then, he/she sees the change that the second computer makes. Finally, the process repeats until the game finishes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because the user does not input anything, the argument &lt;code&gt;location&lt;/code&gt; on the &lt;code&gt;Game.move&lt;/code&gt; method is not relevant, so let’s forget about it for now. If we did that, we would have the following &lt;code&gt;Game&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;CLI&lt;/code&gt; is simple; we just loop and print.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CLI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_finished?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;display_winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But when we would implement the GUI we would have a problem; we were relying on the &lt;code&gt;when_user_selected_location&lt;/code&gt; event to &lt;code&gt;display_board&lt;/code&gt; and &lt;code&gt;display_winner&lt;/code&gt; after each move. Now, we cannot depend upon that event. We want something automatic. We might think in using a loop like the one in the &lt;code&gt;CLI&lt;/code&gt;, but that would not work.&lt;/p&gt;

&lt;p&gt;To understand why, we need to know that in a &lt;code&gt;GUI&lt;/code&gt; there are a lot of components. Events on one component have consequences on others. Most &lt;code&gt;GUI&lt;/code&gt; work with an &lt;a href=&quot;http://en.wikipedia.org/wiki/Event_loop&quot;&gt;event loop&lt;/a&gt; that, very roughly, iterates over all the components to update them, notifying any events that need to be processed and repainting if their aspect has changed. If we block the &lt;a href=&quot;http://en.wikipedia.org/wiki/Event_loop&quot;&gt;event loop&lt;/a&gt; by doing a long computation or running another very long loop, the &lt;code&gt;GUI&lt;/code&gt; will stop responding because the components are no longer notified with the events and are neither repainted.&lt;/p&gt;

&lt;p&gt;We would like to execute something inside that &lt;a href=&quot;http://en.wikipedia.org/wiki/Event_loop&quot;&gt;event loop&lt;/a&gt; without stopping its iteration. It depends on the GUI framework but, most of them provide an event that enables the execution of code very frequently. Let’s refer to it as &lt;code&gt;update&lt;/code&gt;. We could use it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GUI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s good enough for our case because the &lt;code&gt;Game.move&lt;/code&gt; method does not take more than 1 second to finish in the worst case scenario. That means that the &lt;code&gt;GUI&lt;/code&gt; may not be responding for 1 second, but we are sure it will resume responding after that.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;Game.move&lt;/code&gt; method would take more than 1 second and the blocking on the &lt;code&gt;GUI&lt;/code&gt; should not happen at all, we would need to take a look at more complicated stuff: threads.&lt;/p&gt;

&lt;p&gt;In the next post we will face the interleaving of &lt;code&gt;human&lt;/code&gt; and &lt;code&gt;computer&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/11/blocking-calls-and-uis-iii.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/11/blocking-calls-and-uis-iii.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Journal - week 8th May</title>
        <description>&lt;p&gt;This is the first of the weekly series on my newly started journal containing the small tasks I do as the &lt;code&gt;current actions&lt;/code&gt; &lt;em&gt;horizon&lt;/em&gt; (explained in the &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;perspective blog post&lt;/a&gt;). This came out of a suggestion from my co-mentor &lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe&lt;/a&gt; about providing concrete examples to the generic idea of &lt;em&gt;horizons&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tuesday-5th&quot;&gt;Tuesday 5th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 10-9 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Planned small tasks to follow: it felt productive.&lt;/li&gt;
  &lt;li&gt;Showed the result in the tictactoe GUI.&lt;/li&gt;
  &lt;li&gt;Avoided moving in tictactoe to places already occupied.&lt;/li&gt;
  &lt;li&gt;Got a bit stuck refactoring duplication of copy-pasting the buttons in the GUI  (generalizing click events). Achieved it by receiving the sender object of the event in the slot (Qt) as suggested by &lt;a href=&quot;https://twitter.com/ChristophGockel&quot;&gt;Christoph&lt;/a&gt; (shout out!)&lt;/li&gt;
  &lt;li&gt;Added complexity for compatibility with computer player in tictactoe&lt;/li&gt;
  &lt;li&gt;Lost (or invested) 30 minutes organizing the following tasks.&lt;/li&gt;
  &lt;li&gt;Introduced GUI tests.&lt;/li&gt;
  &lt;li&gt;Separated old previous CLI code that is reusable and adapted tests for it.&lt;/li&gt;
  &lt;li&gt;Used new generic for UIs tictactoe code for CLI code.&lt;/li&gt;
  &lt;li&gt;Removed old code.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus back home.&lt;/li&gt;
  &lt;li&gt;In the afternoon I wrote 2 blog posts: &lt;a href=&quot;/8thlight/2015/05/05/getting-things-done.html&quot;&gt;Getting things done&lt;/a&gt; (reused part of my own transcription of the talk from David Alen) and &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;Perspective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wednesday-6th&quot;&gt;Wednesday 6th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Planned what to do (steps to get computer player working)&lt;/li&gt;
  &lt;li&gt;Spiked timer for GUI required to make the updates of the computer player without locking the GUI.&lt;/li&gt;
  &lt;li&gt;Erased spike code and started test-driving it&lt;/li&gt;
  &lt;li&gt;Spent 30 min approximately with &lt;a href=&quot;https://priyapatil101.wordpress.com/&quot;&gt;Priya&lt;/a&gt; helping with naming, intent and a bit of refactoring.&lt;/li&gt;
  &lt;li&gt;Asked Nathan and &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; for advice on testing order of calls. Conclusion: don’t, better to have end-to-end that make sure.&lt;/li&gt;
  &lt;li&gt;Added GUI top-botton, end-to-end tests that helped know what to do next and when I’m done.&lt;/li&gt;
  &lt;li&gt;Starting adding tictactoe options in the same GameWindow but then refactored to different window because it more decoupled and easier to test.&lt;/li&gt;
  &lt;li&gt;Had warnings for having multiple Qt layouts on top of the widget hierarchy.&lt;/li&gt;
  &lt;li&gt;Had intermitent, non-always reproducible segmentation faults from Qt bindings for Ruby when trying to resize GameWindow. Spent some time trying to reproduce and isolate cause. I had no luck with it. Separating options into another window avoided those to appear.&lt;/li&gt;
  &lt;li&gt;Created pull request of the GUI to review.&lt;/li&gt;
  &lt;li&gt;Travis CI was not building because Qt bindings was not specified in the Gemfile.&lt;/li&gt;
  &lt;li&gt;Removed obsolete code.&lt;/li&gt;
  &lt;li&gt;Fixed properties and regression tests that depended on obsolete code.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus back home.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thursday-7th&quot;&gt;Thursday 7th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 10-9 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Did standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Made Travis CI run code by adding Qt bindings in the Gemfile but that made the integration slow (15 minutes each execution) and the test were failing because it couldn’t connect to X server.&lt;/li&gt;
  &lt;li&gt;Ignored GUI tests and updated pull request to send it via mail for review.&lt;/li&gt;
  &lt;li&gt;Had doubts about if the testing GUI was the correct approach. &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt; suggested is good and I should run all the tests In CI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hanster.github.io/&quot;&gt;Sam&lt;/a&gt; suggested using &lt;a href=&quot;http://docs.travis-ci.com/user/gui-and-headless-browsers/&quot;&gt;xvfb&lt;/a&gt; for running GUI tests in Travis CI. When I tried, it worked perfectly (shout out!)&lt;/li&gt;
  &lt;li&gt;Because I was not willing to wait 15 minutes each time I would like to try a change in CI, I started creating my own CI machine locally with Vagrant but that felt &lt;a href=&quot;http://en.wiktionary.org/wiki/yak_shaving&quot;&gt;yak shaving&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Updated higher-order functions blog post with feedback received.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe&lt;/a&gt; suggested do this series of posts after reading &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;perspective blog post&lt;/a&gt; (shout out!)&lt;/li&gt;
  &lt;li&gt;Wrote a bit of &lt;a href=&quot;/8thlight/2015/05/07/blocking-calls-and-uis-ii.html&quot;&gt;blocking calls and UIs II&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus back home.&lt;/li&gt;
  &lt;li&gt;Spent 2 more hours finishing &lt;a href=&quot;/8thlight/2015/05/07/blocking-calls-and-uis-ii.html&quot;&gt;blocking calls and UIs II&lt;/a&gt; at home.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;friday-8th&quot;&gt;Friday 8th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Started preparing the IPM: thinking how to drive it, having a browser with 8th Light’s tool for IPMs, links to tictactoe code, blog posts, etc…&lt;/li&gt;
  &lt;li&gt;Got distracted in &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; by talking about the food ordering process for 8LU and came up with the idea of doing a tool to simplify it.&lt;/li&gt;
  &lt;li&gt;Had my IPM with &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt;. The &lt;em&gt;client&lt;/em&gt; side of him was happy with what was delivered and suggested some changes to refine what he preferred. The &lt;em&gt;mentor&lt;/em&gt; side reviewed the code and suggested some refactorings.&lt;/li&gt;
  &lt;li&gt;We tried the estimation process without the pressure of having to give an answer at the same moment. That felt more comfortable.&lt;/li&gt;
  &lt;li&gt;Asked for feedback on the idea of the tool for the food ordering process and another tool for doing the pomodoro technique with a team.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ecomba.pro/&quot;&gt;Enrique&lt;/a&gt; facilitated a debate about trust and some shared experiences.&lt;/li&gt;
  &lt;li&gt;We had a conversation with &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ChristophGockel&quot;&gt;Christoph&lt;/a&gt; and &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt; about Elixir, a language build on top of Erlang.&lt;/li&gt;
  &lt;li&gt;Had the monthly retrospection with &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt; and &lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe&lt;/a&gt; and we concluded with the following goals (in &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;perspective&lt;/a&gt;: &lt;code&gt;current projects&lt;/code&gt; &lt;em&gt;horizon&lt;/em&gt;):
    &lt;ul&gt;
      &lt;li&gt;Minimize risk by splitting stories and scope.&lt;/li&gt;
      &lt;li&gt;Find heuristics to guide my estimates.&lt;/li&gt;
      &lt;li&gt;Improve my git usage by branching more.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 08 May 2015 22:30:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/08/journal-8th-may.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/08/journal-8th-may.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Blocking calls and UIs II</title>
        <description>&lt;p&gt;In the &lt;a href=&quot;/8thlight/2015/04/30/blocking-calls-and-uis.html&quot;&gt;previous post&lt;/a&gt; I talked about how I was trying to find a way to handle CLI and GUI for tic tac toe.&lt;/p&gt;

&lt;p&gt;One mistake that made things more complicated was modeling the concept of &lt;code&gt;Player&lt;/code&gt;. There is an important distinction between the concept of &lt;code&gt;Player&lt;/code&gt; and the concept of the &lt;code&gt;User&lt;/code&gt;. This is another example that &lt;strong&gt;&lt;a href=&quot;http://www.defprogramming.com/quotes-by/joe-armstrong/&quot;&gt;object oriented programs should model computation&lt;/a&gt;, &lt;a href=&quot;http://programmers.stackexchange.com/questions/137994/does-object-oriented-programming-really-model-the-real-world#comment259465_137994&quot;&gt;not the real world&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Although, in the real world, we think of two players interacting with the game, the real computation that we care about at this stage is the &lt;code&gt;User&lt;/code&gt; of the application. For example; given a game between two &lt;code&gt;Human Players&lt;/code&gt; doesn’t mean that we have two people playing. The computer can’t know. It can happen to be only one person playing acting as both players. That means that the computation we care about is that there is a single &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need to consider too that there is something acting as a &lt;code&gt;Computer Player&lt;/code&gt;. That means that when it is active we need to let the &lt;code&gt;User&lt;/code&gt; know what moves it is doing.&lt;/p&gt;

&lt;p&gt;There are three examples of usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;human vs human&lt;/code&gt;: the user inputs the move for the first human and sees the change. Then, he/she inputs the move for the second human and sees the change. Finally, the process repeats until the game finishes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;human vs computer&lt;/code&gt; (or &lt;code&gt;computer vs human&lt;/code&gt; the other way around): the user inputs the move for the human and sees the change. Then, he/she sees the change that the computer makes. Finally, the process repeats until the game finishes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;computer vs computer&lt;/code&gt;: the user does not input anything, he/she sees the change that the first computer makes. Then, he/she sees the change that the second computer makes. Finally, the process repeats until the game finishes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that is not specific to any UI implementation. That means the code should be developed and tested independently of the UI. Also, the code needs to be valid for all types of UIs; it needs to provide everything any UI needs. It needs to be generic. The only way I know to do that is by thinking in several implementations and seeing if they fit into the design. If they do, it is a valid design. If some implementation not, it can unveil the specific detail that is not valid and maybe point to a way of improving the design.&lt;/p&gt;

&lt;p&gt;That has led me to &lt;a href=&quot;http://c2.com/cgi/wiki?BigDesignUpFront&quot;&gt;BDUF&lt;/a&gt; before, so I followed Kent Beck’s advice:
&lt;strong&gt;We will design for today’s problems today, and tomorrow’s problems tomorrow&lt;/strong&gt;. For the time being, we only care about boards of size 3 and 4. We only care about CLI and GUI. And we only care about the players being human or computer.&lt;/p&gt;

&lt;p&gt;We should not face all the complexity at once, so let’s worry only on &lt;code&gt;human vs human&lt;/code&gt; usage for now.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’ll work for CLI, because we can do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CLI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ask_user_to_select_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_finished?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;display_winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And will work for GUI too, because we can do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GUI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_user_selected_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see by looking at &lt;code&gt;CLI&lt;/code&gt; and &lt;code&gt;GUI&lt;/code&gt; that they have different ways for the user to select the location. In &lt;code&gt;CLI&lt;/code&gt; we explicitly &lt;code&gt;ask_user_to_select_location&lt;/code&gt; and in &lt;code&gt;GUI&lt;/code&gt; we &lt;code&gt;move&lt;/code&gt; &lt;code&gt;when_user_selected_location&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ask_user_to_select_location&lt;/code&gt; is a synchronous, blocking call. &lt;code&gt;when_user_selected_location&lt;/code&gt; is an asynchronous, event call.&lt;/p&gt;

&lt;p&gt;In the next post from this series we will face the &lt;code&gt;human vs computer&lt;/code&gt; and &lt;code&gt;computer vs computer&lt;/code&gt; usages.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 00:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/08/blocking-calls-and-uis-ii.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/08/blocking-calls-and-uis-ii.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Perspective</title>
        <description>&lt;p&gt;As I said in &lt;a href=&quot;/8thlight/2015/05/05/getting-things-done.html&quot;&gt;my previous post&lt;/a&gt;: I found myself losing time that can be avoided. And recently I found some reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I don’t know how to continue with the story I’m working with.&lt;/li&gt;
  &lt;li&gt;I wander through the code for a long time to find what to do next.&lt;/li&gt;
  &lt;li&gt;I do things that are not very relevant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them are caused by not having enough perspective of &lt;em&gt;where I am&lt;/em&gt;, &lt;em&gt;where I need to go&lt;/em&gt; and &lt;em&gt;what steps make sense&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology&quot;&gt;getting things done&lt;/a&gt; method you need to keep in mind about your goals at different levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;current actions&lt;/li&gt;
  &lt;li&gt;current projects&lt;/li&gt;
  &lt;li&gt;areas of responsibility&lt;/li&gt;
  &lt;li&gt;1-2 year goals&lt;/li&gt;
  &lt;li&gt;3-5 year goals&lt;/li&gt;
  &lt;li&gt;Life&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although I had in mind the intermediate &lt;em&gt;horizons&lt;/em&gt; until now, I’m lacking in the rest. It’s time to change that and improve on my perspective of the &lt;em&gt;current actions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit:&lt;/strong&gt; An example of those &lt;em&gt;current actions&lt;/em&gt; could be the &lt;a href=&quot;/8thlight/2015/05/08/journal-8th-may.html&quot;&gt;journal of week 8th May&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 06 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/06/perspective.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/06/perspective.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Getting things done</title>
        <description>&lt;p&gt;Last Friday’s IPM with &lt;a href=&quot;http://skim.la/&quot;&gt;Steve Kim&lt;/a&gt; uncovered something interesting that I was not fully noticing.&lt;/p&gt;

&lt;p&gt;I have been lately feeling like in a &lt;em&gt;zombie&lt;/em&gt; mental state. I was having difficulties to focus. I spent time on irrelevant things. I was not getting things done.&lt;/p&gt;

&lt;p&gt;An example of that is what happened to me on last Thursday; I was working on implementing a GUI with the tic-tac-toe code I had, but I was struggling to do it; I couldn’t find a way to approach it. I spent all that morning only trying to focus and thinking. After lunch, I was desperate. Observing it, &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; suggested that going for a walk could help, so I tried it.&lt;/p&gt;

&lt;p&gt;I went for a walk, bought some cookies and sat for a bit in a small park. There, I cleared my mind enjoying those cookies and the sunny weather that rarely is available in London. After 30 minutes of not thinking about the problem, it was time to go back. On my way I started thinking that the approach I was trying was too forced; the approach I was trying was supposed to require only a few changes to the codebase, but I couldn’t find a way of fully do it. Why not try a different approach that requires changing more code?&lt;/p&gt;

&lt;p&gt;With that idea in mind, when I arrived to the office, I grabbed my computer and entered in &lt;code&gt;the zone&lt;/code&gt; immediately and did not stop for almost anything. At the end of the day I had the necessary information to sense that the new approach was more suitable and easier to understand.&lt;/p&gt;

&lt;p&gt;What a difference between that morning and the afternoon!&lt;/p&gt;

&lt;p&gt;Although disconnecting for a bit worked at that moment, the problem with me feeling &lt;em&gt;zombie&lt;/em&gt; and not being productive is at a much fundamental level.&lt;/p&gt;

&lt;p&gt;As, &lt;a href=&quot;http://en.wikipedia.org/wiki/David_Allen_%28author%29&quot;&gt;David Allen&lt;/a&gt; says in &lt;a href=&quot;https://www.youtube.com/watch?v=CHxhjDPKfbY&quot;&gt;his talk&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Interestingly, the more it is on your mind, the more is not happening, the more you are inappropriately engaged with it.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Don&#39;t keep anything on your head the rest of your life. Everything that your committed to finish that takes more than one step to finish it you need to clarify exactly what that outcome of the project is and put that on a project list that you look at it at least once a week.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;What&#39;s the problem? There is a more subliminal crisis that happens; The whole world now floods into your psyche and that could easily create a sense of overwhelm, a sense of confusion, a sense of conflict, every single thing seems to demand equal kind of attention for you. And then you usually respond to that by either numbing out or getting crazy busy. And then you blame that stress on the lack of time. All I need is more time.&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/05/getting-things-done.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/05/getting-things-done.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Blocking calls and UIs</title>
        <description>&lt;p&gt;In tic tac toe exists the concept of &lt;code&gt;players&lt;/code&gt;. The players interact with the game to decide what move to do when it is their turn.&lt;/p&gt;

&lt;p&gt;The initial design I was working on had the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finished?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_final?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chosen_move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_state_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chosen_move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That implies that &lt;code&gt;next_player.play&lt;/code&gt; should &lt;strong&gt;always return the chosen next state&lt;/strong&gt; when called.&lt;/p&gt;

&lt;p&gt;For example a player that interacts with the CLI:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CliPlayer&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#blocks while waiting for the user input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chosen_move_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s no problem because a call to &lt;code&gt;$stdin.gets&lt;/code&gt; blocks until the user has introduced something. That way, we can be sure that the method call to &lt;code&gt;play&lt;/code&gt; will return always the &lt;code&gt;chosen_move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But when we try to change the &lt;code&gt;next_player&lt;/code&gt; for one that uses a GUI, where the user interacts in a completely different way, things get complicated very fast. In a GUI, the user generates events on the different components and those events may update other components. Those events are dispatched in an internal loop.&lt;/p&gt;

&lt;p&gt;We cannot be sure that a call to &lt;code&gt;play&lt;/code&gt; on an instance of &lt;code&gt;GuiPlayer&lt;/code&gt; will always return the &lt;code&gt;chosen_move&lt;/code&gt; because the user may not have made a move yet. Blocking until having a user input will not work; doing some kind of blocking loop would freeze the GUI and the user would not be able to interact with the GUI to introduce the &lt;code&gt;chosen_move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’m still trying to find a way that handles both situations well. We’ll see how that goes.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2015 11:10:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/04/30/blocking-calls-and-uis.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/04/30/blocking-calls-and-uis.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>I know what this is about</title>
        <description>&lt;p&gt;Also, in the introduction of &lt;a href=&quot;http://bennygreb.de/shop/en/DVDs/DVD-The-Art-and-Science-of-GROOVE.html&quot;&gt;&lt;em&gt;Benny Greb - The art and science of groove&lt;/em&gt;&lt;/a&gt; that I talked about in my &lt;a href=&quot;/8thlight/drumming/2015/04/27/analytical_practice.html&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He explains that to get the benefit from that educational DVD, you have to keep in mind the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;You&#39;ll have to do all the exercises. Some parts may sound familiar to you in one way or another and in purpose. I made them easy to understand so you&#39;ll quickly be able to get the dangerous feeling of &lt;/code&gt;&lt;strong&gt;&lt;code&gt;yeah, I know what this is about&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;. But remember: &lt;/code&gt;&lt;strong&gt;&lt;code&gt;Knowing and not doing is not knowing&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;. So don&#39;t get too smart to start. Do it. All of it. Your groove will only be as good as your weakest link.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;He makes two very strong points in here.&lt;/p&gt;

&lt;p&gt;The first one is that the feeling of &lt;strong&gt;yeah, I know what this is about&lt;/strong&gt; is very dangerous. I felt that way some times and because of it I didn’t give enough attention to the explanation. The outcome of that confirmed that I was being a complete fool. I completely fooled myself by imaginating erroneously what I was supposed to be told. I noticed later that I didn’t know as much as I thought.&lt;/p&gt;

&lt;p&gt;The second one is that, even if you think you can skip some practice in a discipline, you should reconsider it and do it anyways. Chances are that you will improve by doing it, no matter what the practice is and the previous experience that you have. Also, any discipline is a combination of skills and if one of them is not developed enough the overall performance will suffer. Imagine a software developer who cannot interact with clients. No matter how good he is at software, he will not be perceived as a good professional.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 21:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/drumming/2015/04/27/i-know-what-this-is-about.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/drumming/2015/04/27/i-know-what-this-is-about.html</guid>
        
        
        <category>8thlight</category>
        
        <category>drumming</category>
        
      </item>
    
  </channel>
</rss>
