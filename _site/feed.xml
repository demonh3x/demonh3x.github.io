<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The journey of a restless mind</title>
    <description>A personal blog about my experience as a resident apprentice at 8th Light
</description>
    <link>http://demonh3x.github.io//</link>
    <atom:link href="http://demonh3x.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 Jun 2015 21:25:10 +0100</pubDate>
    <lastBuildDate>Mon, 01 Jun 2015 21:25:10 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Simple</title>
        <description>&lt;p&gt;Last Friday, &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; offered to pair on whatever I was working on. I just started working a bit with &lt;a href=&quot;http://rack.github.io/&quot;&gt;Rack&lt;/a&gt;.
I did a bit of the pieces I thought I needed and I was proud of the path I was taking. It was clever, too clever. To the point of re-implementing some of the functionality provided by &lt;a href=&quot;http://rack.github.io/&quot;&gt;Rack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example the router. Only because I didnâ€™t like the API; it seemed complex and rigid to me:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/route&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see that the way of doing routing is by using &lt;code&gt;Rack::Builder&lt;/code&gt;. You have to specify the full path with &lt;code&gt;map&lt;/code&gt;, you cannot match the requests by other characteristics. And you cannot filter by &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, etc. there. So I did my own implementation of a router:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Router&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;UNDEFINED_DEFAULT_HANDLER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;No default handler has been defined!&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UNDEFINED_DEFAULT_HANDLER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_handler&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;default_handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:default_handler&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The same client code would be like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path_starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;REQUEST_PATH&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partial_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path_starts_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/route&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Very similar to the &lt;code&gt;Rack::Builder&lt;/code&gt; syntax. But the &lt;code&gt;Router&lt;/code&gt; I implemented is much more flexible and it does not depend on any class of &lt;a href=&quot;http://rack.github.io/&quot;&gt;Rack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I thought it was simple: the logic of the router (&lt;code&gt;call&lt;/code&gt; method) is only 4 lines long!
But it took a bit more than I expected for &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ChristophGockel&quot;&gt;Christoph&lt;/a&gt; to see what was happening there. I remember what &lt;a href=&quot;https://twitter.com/ChristophGockel&quot;&gt;Christoph&lt;/a&gt; said:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The router receives the routes. But wait... It is a hash and its keys are lambdas!!?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That was something unexpected. Simple code should be easy to maintain. And to be easy to maintain, &lt;a href=&quot;http://www.azquotes.com/quote/773497&quot;&gt;has to be obvious&lt;/a&gt;. The &lt;code&gt;Router&lt;/code&gt; is not obvious. It is expected for anyone looking to a &lt;a href=&quot;http://rack.github.io/&quot;&gt;Rack&lt;/a&gt; project to see &lt;code&gt;Rack::Builder&lt;/code&gt;, not a custom &lt;code&gt;Router&lt;/code&gt;. And even worse, it is not expected to see &lt;code&gt;lambdas&lt;/code&gt; as keys in a &lt;code&gt;Hash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; also like another &lt;a href=&quot;http://en.wikiquote.org/wiki/Ward_Cunningham#The_Simplest_Thing_that_Could_Possibly_Work&quot;&gt;quote from Ward Cunningham&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Simplicity is the shortest path to a solution.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Writing those custom classes is not the shortest path.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/06/01/simple.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/06/01/simple.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Vim plugins - part II</title>
        <description>&lt;p&gt;When you are writing in some verbose language, having a set of snippets that you can use is a way of speeding up your writing.&lt;/p&gt;

&lt;p&gt;Before switching to vim, I was using IntelliJ IDEs. In those, you have some predefined snipped that are easy to use and extend. With that and autocompletion, you spend less time on the every-day tasks. Vim doesnâ€™t have that by default. But there are plugins for it: Iâ€™ve been using &lt;a href=&quot;https://github.com/garbas/vim-snipmate&quot;&gt;snipmate&lt;/a&gt; and its &lt;a href=&quot;https://github.com/honza/vim-snippets&quot;&gt;default snippets&lt;/a&gt;. With that and the built-in &lt;a href=&quot;http://vim.wikia.com/wiki/Any_word_completion&quot;&gt;autocompletion&lt;/a&gt;, I had something similar to what you can get in IntelliJ.&lt;/p&gt;

</description>
        <pubDate>Wed, 27 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/27/vim-plugins-ii.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/27/vim-plugins-ii.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Reflection VS Homoiconicity</title>
        <description>&lt;p&gt;When we make the code more generic, we are making it more flexible and reusable in the sense that the code can handle more usages.&lt;/p&gt;

&lt;p&gt;The first tool in a programming language we have for that is the ability to express abstractions. But when we push those abstractions to the limits, we might find the need to modify the code itself in order to handle even more usages.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;Reflection&lt;/code&gt; and &lt;code&gt;Homoiconicity&lt;/code&gt; provide ways to access the language constructs and enable the developer to reshape or adjust the code within itself.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Reflection&lt;/code&gt; is the way that some languages, like Java or Ruby, provide access to the code itself. They provide an API with methods to find and do almost anything the designers of the language thought the developer might want to do. If the language designers didntâ€™t think of something, doing it will not be possible because it will not be included in the API.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;code&gt;Homoiconicity&lt;/code&gt; means that the code can be represented in terms of the basic data types. For example in Lisp, from which Clojure derives, the code to do a function call is a list. That list has the function to call as the first element. The remaining elements in that list are the arguments for the function. Simplifying the syntax in that way makes modifying the code as simple as modifying a list.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/27/reflection-vs-homoiconicity.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/27/reflection-vs-homoiconicity.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Journal - week 22nd May</title>
        <description>&lt;h2 id=&quot;monday-18th&quot;&gt;Monday 18th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 9 hours.&lt;/li&gt;
  &lt;li&gt;Started doing negamax implementation from pseudo-code, needed to adapt a bit the tests that I had for minimax.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Continued with negamax. Was confused with the negations so I added the tests one by one to discard problems and solve the ones that are appearing.&lt;/li&gt;
  &lt;li&gt;I thought I had finished implementing negamax.&lt;/li&gt;
  &lt;li&gt;Used negamax for the AI.&lt;/li&gt;
  &lt;li&gt;Paired with &lt;a href=&quot;https://twitter.com/slagyr&quot;&gt;Micah&lt;/a&gt; to make the AI in tictactoe value immediate outcomes more. Found some problems caused by some failures on the negamax implementation.&lt;/li&gt;
  &lt;li&gt;When arrived home, tried to do the &lt;a href=&quot;http://en.wikipedia.org/wiki/Bubble_sort&quot;&gt;bubble sort&lt;/a&gt; but I got stuck because I was tired and I was trying a recursive solution (I am not comfortable with it).&lt;/li&gt;
  &lt;li&gt;Before going to sleep, while in the &lt;a href=&quot;/8thlight/2015/05/13/diffuse-mode.html&quot;&gt;diffused mode&lt;/a&gt; had some ideas of how to refactor the code of tictactoe. I wrote them down to not forget them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tuesday-19th&quot;&gt;Tuesday 19th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;In the bus, I started refactoring the tictactoe: Introduced immutable cycling iterator (circular linked list) to simplify the knowledge passed to the AI (players information).&lt;/li&gt;
  &lt;li&gt;Continued refactoring in the office.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Sam shared his smells on the code.&lt;/li&gt;
  &lt;li&gt;More refactoring: Added a bit of player polymorphism and reduced the arguments passed to negamax.&lt;/li&gt;
  &lt;li&gt;Noticed an strange lock when the AI played 4x4. Got a bit stuck. Fixed it by incrementing the depth of the options tree. Lost performance.&lt;/li&gt;
  &lt;li&gt;Added a rake task for profiling the code.&lt;/li&gt;
  &lt;li&gt;Added performance tests to have acceptable criteria and mark the negamax implementation as not good enough yet.&lt;/li&gt;
  &lt;li&gt;Sam helped to view the problem on the negamax implementation.&lt;/li&gt;
  &lt;li&gt;In the bus home, I wrote two short blog posts about vim plugins (series sugestion from Felipe).&lt;/li&gt;
  &lt;li&gt;When arrived home, finished the bubble sort kata with non-recursive solution. Not good enough yet.&lt;/li&gt;
  &lt;li&gt;Before going to sleep, while in the &lt;a href=&quot;/8thlight/2015/05/13/diffuse-mode.html&quot;&gt;diffused mode&lt;/a&gt; had some ideas of how to refactor the code of tictactoe and how to improve the kata. I wrote them down to not forget them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wednesday-20th&quot;&gt;Wednesday 20th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;In the bus, I read Clean Code and had the idea of taking pictures of the interesting parts instead of putting a marker between two pages.&lt;/li&gt;
  &lt;li&gt;Tried to fix the loss of performance. Did not manage to do it.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Sam paired a bit more with the negamax problem. Realized that lazy enumerators in Ruby are slow! Fixed the problem with the depth, but it is still slow.&lt;/li&gt;
  &lt;li&gt;Got back to the previous hand-coded, test-driven implementation of minimax with alpha-beta pruning. Much faster! So much time wastedâ€¦ :S&lt;/li&gt;
  &lt;li&gt;Realized that the algorithm for getting the best moves could be reused.&lt;/li&gt;
  &lt;li&gt;Extracted the common code for the Players.&lt;/li&gt;
  &lt;li&gt;Paired with Skim on refactoring to see how to face some things that I didnâ€™t see how to refactor.
    &lt;ul&gt;
      &lt;li&gt;Each UI will implement HumanPlayer and connect the creation of it with the core without knowing about specific UIs.&lt;/li&gt;
      &lt;li&gt;Validation of the moves.&lt;/li&gt;
      &lt;li&gt;Sending unused game state to the HumanPlayer (required for player polymorphism)&lt;/li&gt;
      &lt;li&gt;Weird cyclic dependency between part of HumanPlayer and the Game.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus home.&lt;/li&gt;
  &lt;li&gt;At home, continued with the bubble sort kata. Found a much better path to follow by doing variations analysis (will write a post about it). Still needed improvement.&lt;/li&gt;
  &lt;li&gt;Paired with Jarkyn on her kata.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thursday-21st&quot;&gt;Thursday 21st&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours. I woke up tired.&lt;/li&gt;
  &lt;li&gt;Improved the steps for the bubble sort kata in the bus.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices&lt;/li&gt;
  &lt;li&gt;Paired with Priya on how to test the code she had to do.&lt;/li&gt;
  &lt;li&gt;Started extracting resulting pieces from the refactorings and test-drove them.&lt;/li&gt;
  &lt;li&gt;Refactored player polymorphism.&lt;/li&gt;
  &lt;li&gt;Started organizing lunch for friday.&lt;/li&gt;
  &lt;li&gt;Refactored more small things.&lt;/li&gt;
  &lt;li&gt;Updated the gem version to 0.1.1 and published it.&lt;/li&gt;
  &lt;li&gt;At home, improved the path for the bubble sort kata and practiced it to not have to think much in the steps. Wrote notes of the steps and what to say while performing it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;friday-22nd&quot;&gt;Friday 22nd&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours. I was tired.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/slagyr&quot;&gt;Micah&lt;/a&gt; had prepared a cohort.&lt;/li&gt;
  &lt;li&gt;We started with an introduction to SOLID principles.&lt;/li&gt;
  &lt;li&gt;Introduction to Design patterns followed.&lt;/li&gt;
  &lt;li&gt;Each one had to choose a design pattern from a list, research about it and then explain it to the rest.&lt;/li&gt;
  &lt;li&gt;We had the performance of the katas from each one of us.&lt;/li&gt;
  &lt;li&gt;And we finished by a post-writing session. Each one had to choose a topic, research about it and then write a post that another person will read to the rest.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 26 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/26/journal-22nd-may.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/26/journal-22nd-may.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Blocking calls and UIs IV</title>
        <description>&lt;p&gt;In the &lt;a href=&quot;/8thlight/2015/05/11/blocking-calls-and-uis-iii.html&quot;&gt;previous post&lt;/a&gt; we solved the &lt;code&gt;computer vs computer&lt;/code&gt; usage. Letâ€™s face the interleaving of &lt;code&gt;computer&lt;/code&gt; and &lt;code&gt;human&lt;/code&gt; in this one.&lt;/p&gt;

&lt;p&gt;With only &lt;code&gt;humans&lt;/code&gt; we had the following API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And with only &lt;code&gt;computers&lt;/code&gt; we had the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to support both ways of usage in a generic way. Letâ€™s start by describing what they do and find the things they have in common.&lt;/p&gt;

&lt;p&gt;We are calling both &lt;code&gt;move&lt;/code&gt; methods to advance to the next player. But, for a &lt;code&gt;human&lt;/code&gt; the game requires a &lt;code&gt;location&lt;/code&gt; to play. If we keep the &lt;code&gt;location&lt;/code&gt; parameter, what do we send when the computer is playing? &lt;code&gt;nil&lt;/code&gt;?. And more importantly, how do we know the computer is playing to send &lt;code&gt;nil&lt;/code&gt;? Do we need to add the &lt;code&gt;current_player&lt;/code&gt; method to &lt;code&gt;Game&lt;/code&gt;? That will make the UIs know and duplicate some of the &lt;code&gt;Game&lt;/code&gt; logic and violates the &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;single responsibility principle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have another option, we can keep the &lt;code&gt;move&lt;/code&gt; method without any parameters and provide that location in some other way. But in what way? If the &lt;code&gt;Game&lt;/code&gt; knows when it needs the &lt;code&gt;location&lt;/code&gt; value, makes sense for the &lt;code&gt;Game&lt;/code&gt; to request it when is needed. What object should &lt;code&gt;Game&lt;/code&gt; request for the &lt;code&gt;location&lt;/code&gt;? The &lt;code&gt;location&lt;/code&gt; comes from the user through the UI, but the &lt;code&gt;Game&lt;/code&gt; shouldnâ€™t know about any specific UI. We need to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;dependency inversion principle&lt;/a&gt; here: &lt;code&gt;Game&lt;/code&gt; depends on an abstraction to get the &lt;code&gt;location&lt;/code&gt; and the specific UI will provide its implementation for it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have to keep in mind that in a &lt;code&gt;Gui&lt;/code&gt;, if the &lt;code&gt;Game&lt;/code&gt; asks to &lt;code&gt;get_location&lt;/code&gt;, the user may not have selected a &lt;code&gt;location&lt;/code&gt; yet. And we cannot block for the same reasons we talked about in the &lt;a href=&quot;/8thlight/2015/05/11/blocking-calls-and-uis-iii.html&quot;&gt;previous post&lt;/a&gt;. That means that the object that provides the &lt;code&gt;location&lt;/code&gt; could not be ready to be queried.&lt;/p&gt;

&lt;p&gt;An implementation could be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuiUser&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_user_selected_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@is_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_ready?&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@is_ready&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_location&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@is_ready&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@location&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code&gt;Cli&lt;/code&gt; things are much easier. We know that each time we &lt;code&gt;ask_to_select_location&lt;/code&gt; it will block and return a valid &lt;code&gt;location&lt;/code&gt;. The implementation could be as simple as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CliUser&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_ready?&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_location&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ask_to_select_location&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that, we can have all modes working.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/26/blocking-calls-and-uis-iv.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/26/blocking-calls-and-uis-iv.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Vim plugins - part I</title>
        <description>&lt;p&gt;One of the things that I like about vim is the speed at which you can move around the text. There are a lot of ways to reach a certain part of the text via shortcuts or commands. That can create confusion.&lt;/p&gt;

&lt;p&gt;Iâ€™ve been using a plugin that simplifies finding and moving around: &lt;a href=&quot;https://github.com/Lokaltog/vim-easymotion&quot;&gt;easymotion&lt;/a&gt;. I like it because it is a simple way to reach other parts. You donâ€™t have to think about words, paragraphs or lines. You just search, write part of the text where you want to jump to, and then select one of the occurrences. Thatâ€™s it, you are there, ready to change or add whatever you need.&lt;/p&gt;

</description>
        <pubDate>Tue, 19 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/19/vim-plugins-i.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/19/vim-plugins-i.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Incomplete object</title>
        <description>&lt;p&gt;Iâ€™m still trying to understand these ideas, how they fit together and what consequences have each one. So this will be more of a presentation of those ideas and the theories I have than a post. The content will be too abstract, Iâ€™m sorry about that. I couldnâ€™t find a good example to explain them.&lt;/p&gt;

&lt;p&gt;While refactoring the GUI code of tic-tac-toe I found an interesting technique that simplify moving things around where they should be and may unveil smells. An example could be found &lt;a href=&quot;https://github.com/demonh3x/tictactoe-gui.rb/blob/cd36f2ceb6276aea2d5cd2a4c1a18e48f0a8b18e/lib/tictactoe/gui/qtgui/game_gui.rb&quot;&gt;in my tic-tac-toe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is based on the idea that objects are bags of functions (methods) that operate with data (attributes). Also, it has in mind that is desirable to have &lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;high-cohesion&lt;/a&gt;, which in simplified terms means that each one of the functions use all the data. If you have &lt;a href=&quot;http://en.wikipedia.org/wiki/Cohesion_%28computer_science%29&quot;&gt;high-cohesion&lt;/a&gt; could mean that the data and functions belong together.&lt;/p&gt;

&lt;p&gt;In object-oriented, we have different ways to send that data to the object. We could send those arguments in the methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AllArguentsSentInEachMethod&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could send it as arguments in the constructor:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AllArgumentsSentInTheConstructor&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or we could have a combination of both:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeArgumentsSentInTheConstructor&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may prefer one or another depending on how the object collaborates with others.&lt;/p&gt;

&lt;p&gt;If you know that the values of &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; do not change often, you may prefer to pass all the arguments in the constructor and all the users of the object not worrying about any of those values.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve_the_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AllArgumentsSentInTheConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_the_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#when the values change...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AllArgumentsSentInTheConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_the_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you know that some values change quite often, you may prefer to pass them as an argument and the clients are going to need to provide them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve_the_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeArgumentsSentInTheConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_the_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#when the values change...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;solve_the_problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this seems odd. We are contaminating the &lt;code&gt;solve_the_problem&lt;/code&gt; procedure with &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;more responsabilities&lt;/a&gt;: It is obtaining &lt;code&gt;c&lt;/code&gt;. It is using &lt;code&gt;c&lt;/code&gt; to complete what &lt;code&gt;object&lt;/code&gt; needs. And it is using &lt;code&gt;object&lt;/code&gt; to &lt;code&gt;solve_the_problem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need to provide &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; before doing anything with &lt;code&gt;object&lt;/code&gt;. The problem we have is that those values come from different places. Here &lt;a href=&quot;http://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;the Builder pattern&lt;/a&gt; may work. But I didnâ€™t know it before this problem and it may seem extra complicated, so I did a simpler version of it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IncompleteObject&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:c&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_for_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;check_for_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_incomplete?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_for_completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Incomplete object&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_incomplete?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Having that, thereâ€™s no much difference from:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#in some part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AllArgumentsSentInTheConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#in another part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#in some part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IncompleteObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#in another part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And from:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#in some part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeArgumentsSentInTheConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#in another part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#in some part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IncompleteObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#in another part of the code:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that, I had much more flexibility of moving &lt;code&gt;object.a = ?&lt;/code&gt;, &lt;code&gt;object.b = ?&lt;/code&gt; or &lt;code&gt;object.c = ?&lt;/code&gt; around until I found the place that made more sense, and then changed those to constructor and method arguments again.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/18/incomplete-object.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/18/incomplete-object.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Journal - week 15th May</title>
        <description>&lt;h2 id=&quot;monday-11th&quot;&gt;Monday 11th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Planned what steps to take to create a gem for tic-tac-toe.&lt;/li&gt;
  &lt;li&gt;Look for information about how to make gems.&lt;/li&gt;
  &lt;li&gt;Created a .gemspec for tic-tac-toe.&lt;/li&gt;
  &lt;li&gt;Reorganized modules and files to separate tic-tac-toe in three repositories: Core, CLI, GUI.&lt;/li&gt;
  &lt;li&gt;Had some problems after renaming github repository for core.&lt;/li&gt;
  &lt;li&gt;Created github repositories for CLI and GUI.&lt;/li&gt;
  &lt;li&gt;Configured Travis for CLI and GUI.&lt;/li&gt;
  &lt;li&gt;Added codeclimate for CLI and GUI.&lt;/li&gt;
  &lt;li&gt;Lost time because I installed the core gem and then I was refactoring the core gem. And any failures were not being detected because the tests were loading the gemâ€™s classes.&lt;/li&gt;
  &lt;li&gt;Talked with Skim and other colleagues about git branching strategies.&lt;/li&gt;
  &lt;li&gt;Wondered about creating gems for CLI/GUI. Conclusion: They are not libraries to consume, they are binaries to execute.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Published &lt;a href=&quot;/8thlight/2015/05/11/blocking-calls-and-uis-iii.html&quot;&gt;Blocking calls and UIs III&lt;/a&gt; that I wrote over the weekend.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tuesday-12th&quot;&gt;Tuesday 12th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 9-10 hours.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Planned what steps to take to have similar user experience in GUI and CLI.&lt;/li&gt;
  &lt;li&gt;Yak shaved: created git shortcuts for most used commands.&lt;/li&gt;
  &lt;li&gt;Added tests for the option to play again: got a bit stuck on asserting that the windows were showing and hiding because the windows were always hidden in tests.&lt;/li&gt;
  &lt;li&gt;Tried branching out each small task. Conclusion: too small tasks are a headache, story-size branches seem good.&lt;/li&gt;
  &lt;li&gt;When had something that might be enough, asked for the clientâ€™s feedback.&lt;/li&gt;
  &lt;li&gt;Talked a bit with Sam about Ruby: protected, public, private, modules vs inheritance, class instance variables vs instance variables.&lt;/li&gt;
  &lt;li&gt;Tried to add bundler cache in Travis to reduce the time of GUI integration, it did not work because the gem was installed manually and bundler did not find it.&lt;/li&gt;
  &lt;li&gt;Started refactoring GUI.&lt;/li&gt;
  &lt;li&gt;Read XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;At home, wrote &lt;a href=&quot;/8thlight/2015/05/12/sleep.html&quot;&gt;Sleep&lt;/a&gt; post and published it.&lt;/li&gt;
  &lt;li&gt;Felipe proposed to pair for a bit, we started changing inheritance for composition and adding a generic layer for any GUI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wednesday-13th&quot;&gt;Wednesday 13th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;Finished reading XP Explained in the bus.&lt;/li&gt;
  &lt;li&gt;Did standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Moved specific GUI widget details to a factory.&lt;/li&gt;
  &lt;li&gt;Separated GUI widgets in different files.&lt;/li&gt;
  &lt;li&gt;Because the GUI tests depended on Qt framework, I had to change the entry point to access Qt classes a lot of times.&lt;/li&gt;
  &lt;li&gt;Generalized GUI widget APIs.&lt;/li&gt;
  &lt;li&gt;Talked with Skim about the current refactoring state and the simplest way to detach the UI framework.&lt;/li&gt;
  &lt;li&gt;Had idea for a blog post: setter methods for configuration instead of constructor arguments may help the refactoring stage.&lt;/li&gt;
  &lt;li&gt;At home, wrote &lt;a href=&quot;/8thlight/2015/05/13/diffuse-mode.html&quot;&gt;Diffuse mode&lt;/a&gt; post and published it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thursday-14th&quot;&gt;Thursday 14th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;Started reading Clean Code in the bus.&lt;/li&gt;
  &lt;li&gt;Planned what steps to take to finish the refactor.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Reinforced my feeling on setter methods over constructor arguments in the refactoring stage because simplified moving things around.&lt;/li&gt;
  &lt;li&gt;Found a strange thing in the refactoring that felt like a smell: class with no public methods. It was only registering events in the constructor to call the logic and update the display.&lt;/li&gt;
  &lt;li&gt;That made me wonder about refactoring towards something like &lt;code&gt;events (input)&lt;/code&gt; -&amp;gt; &lt;code&gt;logic&lt;/code&gt; -&amp;gt; &lt;code&gt;display (output)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Had a conversation with Skim about that idea and what approach to focus on. Difficult to separate events from representation because in Qt they are tied together inside the widgets. And decided to have &lt;code&gt;common Window objects&lt;/code&gt; -use-&amp;gt; &lt;code&gt;specific GUI objects&lt;/code&gt; -use-&amp;gt; &lt;code&gt;Qt widgets&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A lot of refactoring.&lt;/li&gt;
  &lt;li&gt;Useful things in the refactoring:
    &lt;ul&gt;
      &lt;li&gt;setter methods instead of constructor arguments.&lt;/li&gt;
      &lt;li&gt;integration tests (although had to change after most of the refactorings)&lt;/li&gt;
      &lt;li&gt;changing modification of instance variables for arguments and return values.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;friday-15th&quot;&gt;Friday 15th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus.&lt;/li&gt;
  &lt;li&gt;Standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Gave advice to Priya about nervousness in giving talks.&lt;/li&gt;
  &lt;li&gt;Had IPM with Skim:
    &lt;ul&gt;
      &lt;li&gt;Delivered stories: good.&lt;/li&gt;
      &lt;li&gt;Code review: need to do a lot of small improvements, inconsistencies and simplifications.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Did the estimations again without having to give an immediate answer. Again, it felt comfortable and quite precise.&lt;/li&gt;
  &lt;li&gt;We assisted to a talk from Priya on Unix Processes and then another about the impostor syndrome from Daniel and Enrique.&lt;/li&gt;
  &lt;li&gt;Had a meeting about improving and concerns.&lt;/li&gt;
  &lt;li&gt;Had a small conversation with Uku about doing a free self-organized open-space similar to socrates conference.&lt;/li&gt;
  &lt;li&gt;Read Clean Code in the bus.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 16 May 2015 22:30:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/16/journal-15th-may.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/16/journal-15th-may.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Diffuse mode</title>
        <description>&lt;p&gt;It happens that when we are focused in a topic, we lose the ability to see it in a different way.
You may know the technique of &lt;code&gt;having a shower&lt;/code&gt; or &lt;code&gt;going for a walk&lt;/code&gt; to get a fresh point of view. I have been involved in conversations about that topic quite frequently. &lt;a href=&quot;http://www.barbaraoakley.com/&quot;&gt;Barbara Oakley&lt;/a&gt; explains &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/23&quot;&gt;the following&lt;/a&gt; &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/21&quot;&gt;about it&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Researchers have found that we have two fundamentally different modes of thinking, here I&#39;ll call them the Focused and Diffuse mode. We are either in the Focused mode or in the Diffuse mode of thinking. It seems you can&#39;t be at both ways of thinking modes at the same time.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When we are in the Focused mode, our brains work in constrained zones to maximize the amount of energy spent on an area of knowledge and/or abilities.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The Focused mode, in some sense, is like if the thought is traveling along a familiar, nicely-paved road. But what if the problem you are working on needs new ideas or approaches, concepts that you haven&#39;t thought of before.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Those may need you to activate a different zone on your brain. &lt;code&gt;But if you haven&#39;t had that thought before, you don&#39;t even know where it is. How are we going to reach there in the first place?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;In the Diffuse mode of thinking you can look at things broadly. You can make new neural connections traveling along new pathways.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To activate the diffuse mode, &lt;code&gt;Salvador Dali would relax in his chair and let his mind go free. He&#39;d had a key in his hand and as he would slip into his dreams, falling asleep, the key would fall from his hand and the clatter would wake him up. Just in time so he could gather up those thoughts and ideas in his mind and off he&#39;d go back into the focused mode, bringing with him the new connections he made while in the diffuse mode.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;According to legend, Thomas Edison would do something similar.&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/13/diffuse-mode.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/13/diffuse-mode.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Sleep</title>
        <description>&lt;p&gt;If you have read &lt;a href=&quot;/8thlight/2015/05/08/journal-8th-may.html&quot;&gt;my first journal post&lt;/a&gt;, you may have noticed that I wrote the amount of sleep I had each day. 
You may have noticed also that it sometimes is more than expected from an adult, around 9-10 hours.&lt;/p&gt;

&lt;p&gt;Iâ€™m trying lately to sleep as much as my body needs. Iâ€™m trying to wake up by myself and not because an alarm is sounding on my phone. I donâ€™t always achieve it. Sometimes I go to sleep too late and the alarm ends up waking me up.&lt;/p&gt;

&lt;p&gt;You may wonder why. Iâ€™m going to use some quotes from a very concise &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/25&quot;&gt;lecture&lt;/a&gt; from &lt;a href=&quot;http://www.barbaraoakley.com/&quot;&gt;Dr. Barbara Oakley&lt;/a&gt; in a MOOC called &lt;a href=&quot;https://class.coursera.org/learning-001/lecture/25&quot;&gt;Learning How to Learn: Powerful mental tools to help you master tough subjects&lt;/a&gt; to respond to that:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sleep, which can sometimes seem like such a waste of time, is actually your brain&#39;s way of keeping clean and healthy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sleep is actually an important part of the memory and learning process&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Sleep has also been shown to make a remarkable difference in your ability to figure out difficult problems and to understand what you are trying to learn&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 May 2015 23:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/12/sleep.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/12/sleep.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
  </channel>
</rss>
