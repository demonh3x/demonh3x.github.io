<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The journey of a restless mind</title>
    <description>A personal blog about my experience as a resident apprentice at 8th Light
</description>
    <link>http://demonh3x.github.io//</link>
    <atom:link href="http://demonh3x.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 08 May 2015 21:40:28 +0100</pubDate>
    <lastBuildDate>Fri, 08 May 2015 21:40:28 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Journal - week 8th May</title>
        <description>&lt;p&gt;This is the first of the weekly series on my newly started journal containing the small tasks I do as the &lt;code&gt;current actions&lt;/code&gt; &lt;em&gt;horizon&lt;/em&gt; (explained in the &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;perspective blog post&lt;/a&gt;). This came out of a suggestion from my co-mentor &lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe&lt;/a&gt; about providing concrete examples to the generic idea of &lt;em&gt;horizons&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tuesday-5th&quot;&gt;Tuesday 5th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 10-9 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Planned small tasks to follow: it felt productive.&lt;/li&gt;
  &lt;li&gt;Showed the result in the tictactoe GUI.&lt;/li&gt;
  &lt;li&gt;Avoided moving in tictactoe to places already occupied.&lt;/li&gt;
  &lt;li&gt;Got a bit stuck refactoring duplication of copy-pasting the buttons in the GUI  (generalizing click events). Achieved it by receiving the sender object of the event in the slot (Qt) as suggested by &lt;a href=&quot;https://twitter.com/ChristophGockel&quot;&gt;Christoph&lt;/a&gt; (shout out!)&lt;/li&gt;
  &lt;li&gt;Added complexity for compatibility with computer player in tictactoe&lt;/li&gt;
  &lt;li&gt;Lost (or invested) 30 minutes organizing the following tasks.&lt;/li&gt;
  &lt;li&gt;Introduced GUI tests.&lt;/li&gt;
  &lt;li&gt;Separated old previous CLI code that is reusable and adapted tests for it.&lt;/li&gt;
  &lt;li&gt;Used new generic for UIs tictactoe code for CLI code.&lt;/li&gt;
  &lt;li&gt;Removed old code.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus back home.&lt;/li&gt;
  &lt;li&gt;In the afternoon I wrote 2 blog posts: &lt;a href=&quot;/8thlight/2015/05/05/getting-things-done.html&quot;&gt;Getting things done&lt;/a&gt; (reused part of my own transcription of the talk from David Alen) and &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;Perspective&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wednesday-6th&quot;&gt;Wednesday 6th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 8 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Planned what to do (steps to get computer player working)&lt;/li&gt;
  &lt;li&gt;Spiked timer for GUI required to make the updates of the computer player without locking the GUI.&lt;/li&gt;
  &lt;li&gt;Erased spike code and started test-driving it&lt;/li&gt;
  &lt;li&gt;Spent 30 min approximately with &lt;a href=&quot;https://priyapatil101.wordpress.com/&quot;&gt;Priya&lt;/a&gt; helping with naming, intent and a bit of refactoring.&lt;/li&gt;
  &lt;li&gt;Asked Nathan and &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; for advice on testing order of calls. Conclusion: don’t, better to have end-to-end that make sure.&lt;/li&gt;
  &lt;li&gt;Added GUI top-botton, end-to-end tests that helped know what to do next and when I’m done.&lt;/li&gt;
  &lt;li&gt;Starting adding tictactoe options in the same GameWindow but then refactored to different window because it more decoupled and easier to test.&lt;/li&gt;
  &lt;li&gt;Had warnings for having multiple Qt layouts on top of the widget hierarchy.&lt;/li&gt;
  &lt;li&gt;Had intermitent, non-always reproducible segmentation faults from Qt bindings for Ruby when trying to resize GameWindow. Spent some time trying to reproduce and isolate cause. I had no luck with it. Separating options into another window avoided those to appear.&lt;/li&gt;
  &lt;li&gt;Created pull request of the GUI to review.&lt;/li&gt;
  &lt;li&gt;Travis CI was not building because Qt bindings was not specified in the Gemfile.&lt;/li&gt;
  &lt;li&gt;Removed obsolete code.&lt;/li&gt;
  &lt;li&gt;Fixed properties and regression tests that depended on obsolete code.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus back home.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thursday-7th&quot;&gt;Thursday 7th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 10-9 hours.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus to the office.&lt;/li&gt;
  &lt;li&gt;Did standup with apprentices.&lt;/li&gt;
  &lt;li&gt;Made Travis CI run code by adding Qt bindings in the Gemfile but that made the integration slow (15 minutes each execution) and the test were failing because it couldn’t connect to X server.&lt;/li&gt;
  &lt;li&gt;Ignored GUI tests and updated pull request to send it via mail for review.&lt;/li&gt;
  &lt;li&gt;Had doubts about if the testing GUI was the correct approach. &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt; suggested is good and I should run all the tests In CI.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hanster.github.io/&quot;&gt;Sam&lt;/a&gt; suggested using &lt;a href=&quot;http://docs.travis-ci.com/user/gui-and-headless-browsers/&quot;&gt;xvfb&lt;/a&gt; for running GUI tests in Travis CI. When I tried, it worked perfectly (shout out!)&lt;/li&gt;
  &lt;li&gt;Because I was not willing to wait 15 minutes each time I would like to try a change in CI, I started creating my own CI machine locally with Vagrant but that felt &lt;a href=&quot;http://en.wiktionary.org/wiki/yak_shaving&quot;&gt;yak shaving&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Updated higher-order functions blog post with feedback received.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe&lt;/a&gt; suggested do this series of posts after reading &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;perspective blog post&lt;/a&gt; (shout out!)&lt;/li&gt;
  &lt;li&gt;Wrote a bit of &lt;a href=&quot;/8thlight/2015/05/07/blocking-calls-and-uis-ii.html&quot;&gt;blocking calls and UIs II&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Read &lt;a href=&quot;http://www.amazon.co.uk/Extreme-Programming-Explained-Embrace-Change/dp/0201616416&quot;&gt;XP explained&lt;/a&gt; in the bus back home.&lt;/li&gt;
  &lt;li&gt;Spent 2 more hours finishing &lt;a href=&quot;/8thlight/2015/05/07/blocking-calls-and-uis-ii.html&quot;&gt;blocking calls and UIs II&lt;/a&gt; at home.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;friday-8th&quot;&gt;Friday 8th&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;That night I slept 7 hours.&lt;/li&gt;
  &lt;li&gt;Started preparing the IPM: thinking how to drive it, having a browser with 8th Light’s tool for IPMs, links to tictactoe code, blog posts, etc…&lt;/li&gt;
  &lt;li&gt;Got distracted in &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; by talking about the food ordering process for 8LU and came up with the idea of doing a tool to simplify it.&lt;/li&gt;
  &lt;li&gt;Had my IPM with &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt;. The &lt;em&gt;client&lt;/em&gt; side of him was happy with what was delivered and suggested some changes to refine what he preferred. The &lt;em&gt;mentor&lt;/em&gt; side reviewed the code and suggested some refactorings.&lt;/li&gt;
  &lt;li&gt;We tried the estimation process without the pressure of having to give an answer at the same moment. That felt more comfortable.&lt;/li&gt;
  &lt;li&gt;Asked for feedback on the idea of the tool for the food ordering process and another tool for doing the pomodoro technique with a team.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ecomba.pro/&quot;&gt;Enrique&lt;/a&gt; facilitated a debate about trust and some shared experiences.&lt;/li&gt;
  &lt;li&gt;We had a conversation with &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ChristophGockel&quot;&gt;Christoph&lt;/a&gt; and &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt; about Elixir, a language build on top of Earlang.&lt;/li&gt;
  &lt;li&gt;Had the monthly retrospection with &lt;a href=&quot;http://skim.la/&quot;&gt;Skim&lt;/a&gt; and &lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe&lt;/a&gt; and we concluded with the following goals (in &lt;a href=&quot;/8thlight/2015/05/06/perspective.html&quot;&gt;perspective&lt;/a&gt;: &lt;code&gt;current projects&lt;/code&gt; &lt;em&gt;horizon&lt;/em&gt;):
    &lt;ul&gt;
      &lt;li&gt;Minimize risk by splitting stories and scope.&lt;/li&gt;
      &lt;li&gt;Find heuristics to guide my estimates.&lt;/li&gt;
      &lt;li&gt;Improve my git usage by branching more.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 08 May 2015 22:30:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/08/journal-8th-may.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/08/journal-8th-may.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Blocking calls and UIs II</title>
        <description>&lt;p&gt;In the &lt;a href=&quot;/8thlight/2015/04/30/blocking-calls-and-uis.html&quot;&gt;previous post&lt;/a&gt; I talked about how I was trying to find a way to handle CLI and GUI for tic tac toe.&lt;/p&gt;

&lt;p&gt;One mistake that made things more complicated was modeling the concept of &lt;code&gt;Player&lt;/code&gt;. There is an important distinction between the concept of &lt;code&gt;Player&lt;/code&gt; and the concept of the &lt;code&gt;User&lt;/code&gt;. This is another example that &lt;strong&gt;&lt;a href=&quot;http://www.defprogramming.com/quotes-by/joe-armstrong/&quot;&gt;object oriented programs should model computation&lt;/a&gt;, &lt;a href=&quot;http://programmers.stackexchange.com/questions/137994/does-object-oriented-programming-really-model-the-real-world#comment259465_137994&quot;&gt;not the real world&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Although, in the real world, we think of two players interacting with the game, the real computation that we care about at this stage is the &lt;code&gt;User&lt;/code&gt; of the application. For example; given a game between two &lt;code&gt;Human Players&lt;/code&gt; doesn’t mean that we have two people playing. The computer can’t know. It can happen to be only one person playing acting as both players. That means that the computation we care about is that there is a single &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We need to consider too that there is something acting as a &lt;code&gt;Computer Player&lt;/code&gt;. That means that when it is active we need to let the &lt;code&gt;User&lt;/code&gt; know what moves it is doing.&lt;/p&gt;

&lt;p&gt;There are three examples of usage:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;human vs human&lt;/code&gt;: the user inputs the move for the first human and sees the change. Then, he/she inputs the move for the second human and sees the change. Finally, the process repeats until the game finishes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;human vs computer&lt;/code&gt; (or &lt;code&gt;computer vs human&lt;/code&gt; the other way around): the user inputs the move for the human and sees the change. Then, he/she sees the change that the computer makes. Finally, the process repeats until the game finishes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;computer vs computer&lt;/code&gt;: the user does not input anything, he/she sees the change that the first computer makes. Then, he/she sees the change that the second computer makes. Finally, the process repeats until the game finishes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of that is not specific to any UI implementation. That means the code should be developed and tested independently of the UI. Also, the code needs to be valid for all types of UIs; it needs to provide everything any UI needs. It needs to be generic. The only way I know to do that is by thinking in several implementations and seeing if they fit into the design. If they do, it is a valid design. If some implementation not, it can unveil the specific detail that is not valid and maybe point to a way of improving the design.&lt;/p&gt;

&lt;p&gt;That has led me to &lt;a href=&quot;http://c2.com/cgi/wiki?BigDesignUpFront&quot;&gt;BDUF&lt;/a&gt; before, so I followed Kent Beck’s advice:
&lt;strong&gt;We will design for today’s problems today, and tomorrow’s problems tomorrow&lt;/strong&gt;. For the time being, we only care about boards of size 3 and 4. We only care about CLI and GUI. And we only care about the players being human or computer.&lt;/p&gt;

&lt;p&gt;We should not face all the complexity at once, so let’s worry only on &lt;code&gt;human vs human&lt;/code&gt; usage for now.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;board&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’ll work for CLI, because we can do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CLI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ask_user_to_select_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_finished?&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;display_winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And will work for GUI too, because we can do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GUI&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;when_user_selected_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;display_board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;display_winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_finished?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see by looking at &lt;code&gt;CLI&lt;/code&gt; and &lt;code&gt;GUI&lt;/code&gt; that they have different ways for the user to select the location. In &lt;code&gt;CLI&lt;/code&gt; we explicitly &lt;code&gt;ask_user_to_select_location&lt;/code&gt; and in &lt;code&gt;GUI&lt;/code&gt; we &lt;code&gt;move&lt;/code&gt; &lt;code&gt;when_user_selected_location&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ask_user_to_select_location&lt;/code&gt; is a synchronous, blocking call. &lt;code&gt;when_user_selected_location&lt;/code&gt; is an asynchronous, event call.&lt;/p&gt;

&lt;p&gt;In the next post from this series we will face the &lt;code&gt;human vs computer&lt;/code&gt; and &lt;code&gt;computer vs computer&lt;/code&gt; usages.&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 00:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/08/blocking-calls-and-uis-ii.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/08/blocking-calls-and-uis-ii.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Perspective</title>
        <description>&lt;p&gt;As I said in &lt;a href=&quot;/8thlight/2015/05/05/getting-things-done.html&quot;&gt;my previous post&lt;/a&gt;: I found myself losing time that can be avoided. And recently I found some reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I don’t know how to continue with the story I’m working with.&lt;/li&gt;
  &lt;li&gt;I wander through the code for a long time to find what to do next.&lt;/li&gt;
  &lt;li&gt;I do things that are not very relevant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them are caused by not having enough perspective of &lt;em&gt;where I am&lt;/em&gt;, &lt;em&gt;where I need to go&lt;/em&gt; and &lt;em&gt;what steps make sense&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;http://en.wikipedia.org/wiki/Getting_Things_Done#Methodology&quot;&gt;getting things done&lt;/a&gt; method you need to keep in mind about your goals at different levels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;current actions&lt;/li&gt;
  &lt;li&gt;current projects&lt;/li&gt;
  &lt;li&gt;areas of responsibility&lt;/li&gt;
  &lt;li&gt;1-2 year goals&lt;/li&gt;
  &lt;li&gt;3-5 year goals&lt;/li&gt;
  &lt;li&gt;Life&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although I had in mind the intermediate &lt;em&gt;horizons&lt;/em&gt; until now, I’m lacking in the rest. It’s time to change that and improve on my perspective of the &lt;em&gt;current actions&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 06 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/06/perspective.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/06/perspective.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Getting things done</title>
        <description>&lt;p&gt;Last Friday’s IPM with &lt;a href=&quot;http://skim.la/&quot;&gt;Steve Kim&lt;/a&gt; uncovered something interesting that I was not fully noticing.&lt;/p&gt;

&lt;p&gt;I have been lately feeling like in a &lt;em&gt;zombie&lt;/em&gt; mental state. I was having difficulties to focus. I spent time on irrelevant things. I was not getting things done.&lt;/p&gt;

&lt;p&gt;An example of that is what happened to me on last Thursday; I was working on implementing a GUI with the tic-tac-toe code I had, but I was struggling to do it; I couldn’t find a way to approach it. I spent all that morning only trying to focus and thinking. After lunch, I was desperate. Observing it, &lt;a href=&quot;http://maikon.github.io/&quot;&gt;Makis&lt;/a&gt; suggested that going for a walk could help, so I tried it.&lt;/p&gt;

&lt;p&gt;I went for a walk, bought some cookies and sat for a bit in a small park. There, I cleared my mind enjoying those cookies and the sunny weather that rarely is available in London. After 30 minutes of not thinking about the problem, it was time to go back. On my way I started thinking that the approach I was trying was too forced; the approach I was trying was supposed to require only a few changes to the codebase, but I couldn’t find a way of fully do it. Why not try a different approach that requires changing more code?&lt;/p&gt;

&lt;p&gt;With that idea in mind, when I arrived to the office, I grabbed my computer and entered in &lt;code&gt;the zone&lt;/code&gt; immediately and did not stop for almost anything. At the end of the day I had the necessary information to sense that the new approach was more suitable and easier to understand.&lt;/p&gt;

&lt;p&gt;What a difference between that morning and the afternoon!&lt;/p&gt;

&lt;p&gt;Although disconnecting for a bit worked at that moment, the problem with me feeling &lt;em&gt;zombie&lt;/em&gt; and not being productive is at a much fundamental level.&lt;/p&gt;

&lt;p&gt;As, &lt;a href=&quot;http://en.wikipedia.org/wiki/David_Allen_%28author%29&quot;&gt;David Allen&lt;/a&gt; says in &lt;a href=&quot;https://www.youtube.com/watch?v=CHxhjDPKfbY&quot;&gt;his talk&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Interestingly, the more it is on your mind, the more is not happening, the more you are inappropriately engaged with it.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Don&#39;t keep anything on your head the rest of your life. Everything that your committed to finish that takes more than one step to finish it you need to clarify exactly what that outcome of the project is and put that on a project list that you look at it at least once a week.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;What&#39;s the problem? There is a more subliminal crisis that happens; The whole world now floods into your psyche and that could easily create a sense of overwhelm, a sense of confusion, a sense of conflict, every single thing seems to demand equal kind of attention for you. And then you usually respond to that by either numbing out or getting crazy busy. And then you blame that stress on the lack of time. All I need is more time.&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 May 2015 22:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/05/05/getting-things-done.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/05/05/getting-things-done.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Blocking calls and UIs</title>
        <description>&lt;p&gt;In tic tac toe exists the concept of &lt;code&gt;players&lt;/code&gt;. The players interact with the game to decide what move to do when it is their turn.&lt;/p&gt;

&lt;p&gt;The initial design I was working on had the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finished?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_final?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;step&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chosen_move&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_player&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_state_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chosen_move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finished?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That implies that &lt;code&gt;next_player.play&lt;/code&gt; should &lt;strong&gt;always return the chosen next state&lt;/strong&gt; when called.&lt;/p&gt;

&lt;p&gt;For example a player that interacts with the CLI:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CliPlayer&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#blocks while waiting for the user input&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;chosen_move_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s no problem because a call to &lt;code&gt;$stdin.gets&lt;/code&gt; blocks until the user has introduced something. That way, we can be sure that the method call to &lt;code&gt;play&lt;/code&gt; will return always the &lt;code&gt;chosen_move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But when we try to change the &lt;code&gt;next_player&lt;/code&gt; for one that uses a GUI, where the user interacts in a completely different way, things get complicated very fast. In a GUI, the user generates events on the different components and those events may update other components. Those events are dispatched in an internal loop.&lt;/p&gt;

&lt;p&gt;We cannot be sure that a call to &lt;code&gt;play&lt;/code&gt; on an instance of &lt;code&gt;GuiPlayer&lt;/code&gt; will always return the &lt;code&gt;chosen_move&lt;/code&gt; because the user may not have made a move yet. Blocking until having a user input will not work; doing some kind of blocking loop would freeze the GUI and the user would not be able to interact with the GUI to introduce the &lt;code&gt;chosen_move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’m still trying to find a way that handles both situations well. We’ll see how that goes.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2015 11:10:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/04/30/blocking-calls-and-uis.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/04/30/blocking-calls-and-uis.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>I know what this is about</title>
        <description>&lt;p&gt;Also, in the introduction of &lt;a href=&quot;http://bennygreb.de/shop/en/DVDs/DVD-The-Art-and-Science-of-GROOVE.html&quot;&gt;&lt;em&gt;Benny Greb - The art and science of groove&lt;/em&gt;&lt;/a&gt; that I talked about in my &lt;a href=&quot;/8thlight/drumming/2015/04/27/analytical_practice.html&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He explains that to get the benefit from that educational DVD, you have to keep in mind the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;You&#39;ll have to do all the exercises. Some parts may sound familiar to you in one way or another and in purpose. I made them easy to understand so you&#39;ll quickly be able to get the dangerous feeling of &lt;/code&gt;&lt;strong&gt;&lt;code&gt;yeah, I know what this is about&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;. But remember: &lt;/code&gt;&lt;strong&gt;&lt;code&gt;Knowing and not doing is not knowing&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;. So don&#39;t get too smart to start. Do it. All of it. Your groove will only be as good as your weakest link.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;He makes two very strong points in here.&lt;/p&gt;

&lt;p&gt;The first one is that the feeling of &lt;strong&gt;yeah, I know what this is about&lt;/strong&gt; is very dangerous. I felt that way some times and because of it I didn’t give enough attention to the explanation. The outcome of that confirmed that I was being a complete fool. I completely fooled myself by imaginating erroneously what I was supposed to be told. I noticed later that I didn’t know as much as I thought.&lt;/p&gt;

&lt;p&gt;The second one is that, even if you think you can skip some practice in a discipline, you should reconsider it and do it anyways. Chances are that you will improve by doing it, no matter what the practice is and the previous experience that you have. Also, any discipline is a combination of skills and if one of them is not developed enough the overall performance will suffer. Imagine a software developer who cannot interact with clients. No matter how good he is at software, he will not be perceived as a good professional.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 21:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/drumming/2015/04/27/i-know-what-this-is-about.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/drumming/2015/04/27/i-know-what-this-is-about.html</guid>
        
        
        <category>8thlight</category>
        
        <category>drumming</category>
        
      </item>
    
      <item>
        <title>Analytical practice</title>
        <description>&lt;p&gt;Today I had the opportunity to watch the introduction of &lt;a href=&quot;http://bennygreb.de/shop/en/DVDs/DVD-The-Art-and-Science-of-GROOVE.html&quot;&gt;&lt;em&gt;Benny Greb - The art and science of groove&lt;/em&gt;&lt;/a&gt;.
He is a famous drummer and very good educator. He is also the author of &lt;a href=&quot;http://www.amazon.co.uk/The-Language-Drumming-Book-With/dp/1480342394/ref=pd_cp_d_h__0&quot;&gt;&lt;em&gt;The language of drumming&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In that introduction, he talks about what groove is and explains the myths that exist around it. He uses the following example of the misconceptions about the topic:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Well, is not as simple as that. Technique you can practice, but groove you can&#39;t. See, I&#39;ve been blessed with great feel. Solid time-feel is a gift, either you have it or you don&#39;t&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;He responds to those statements:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;If it is gift, I didn&#39;t have it, but I worked on it, improved it.
Having a great groove is not a gift, it is a skill, but more specifically, a combination of learnable skills.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, he continues with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;We&#39;ll approach them from all the different angles and specific exercises and tools in each area that are all must-have elements of groove.
At the end, all of them will serve you intuitively. And when you need to tweak something or troubleshoot you&#39;ll be able to zoom in and work on each of them separately.
Become an expert that will diagnose and know when and why something isn&#39;t working. And then have tools available to fix it.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That resonated with me. He is one of the bests because he can analyze in very deep detail all the aspects involved in drumming and is capable of isolating them in practice.
I completely agree in that approach towards a discipline. It is the only way to be the best you can be.
That approach gives you an intuition that you can use subconsciously but without losing the capability of switching to a conscious approach. That is true not only in drumming, also in software and I bet in any available discipline.&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Apr 2015 20:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/drumming/2015/04/27/analytical_practice.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/drumming/2015/04/27/analytical_practice.html</guid>
        
        
        <category>8thlight</category>
        
        <category>drumming</category>
        
      </item>
    
      <item>
        <title>Optimizing with metaprogramming</title>
        <description>&lt;p&gt;Most times, optimization is a trade-off. You sacrifice something, usually readability and simplicity, in favor of a piece of code that executes faster. Is your judgment who decides if that speed gain is worth the loss in the other aspects. This post is about a technique that focuses only on maximizing speed. It is just another tool in our toolbox. It may be used if necessary given the trade-offs.&lt;/p&gt;

&lt;p&gt;I came up with this idea while facing the optimization phase on the AI for tic tac toe. I’ll use &lt;a href=&quot;https://github.com/demonh3x/tictactoe.rb/commit/d8f4d16e3ee4d540e06b373d0612ee797b58e332&quot;&gt;that example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code processed the following data; an array containing the &lt;code&gt;marks&lt;/code&gt; where each player has made a move, and the groups of indexes in &lt;code&gt;marks&lt;/code&gt; that conform a &lt;code&gt;line&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a 3 by 3 board that data would be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;:o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lines_3_by_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One of the requirements is also to support a 4 by 4 board, so my generic implementation was:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@winner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marks_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line_marks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are_the_same?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;marks_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;are_the_same?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line_marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;line_marks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line_marks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Given a simple integration scenario, the profiler measurements pointed that the &lt;code&gt;winner&lt;/code&gt; method was being called 17280 times and roughly &lt;strong&gt;75%&lt;/strong&gt; of the processing time was spent there. 40% of which was spent on &lt;code&gt;select&lt;/code&gt; calls and 30% on &lt;code&gt;map&lt;/code&gt; calls. Those &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; calls are very expensive, we need to get rid of those.&lt;/p&gt;

&lt;p&gt;When we make a piece of code more generic, we are extending the amount of scenarios solved by that code. If given good names it also creates an abstraction layer that helps human reasoning. But generalizing comes with a small cost in performance. Most of the times that cost is completely irrelevant. 75% is not irrelevant.&lt;/p&gt;

&lt;p&gt;Basically, what we are doing in those lines is looking at the &lt;code&gt;marks&lt;/code&gt; array by the &lt;code&gt;line&lt;/code&gt; indexes to get the mark that is occupying a full &lt;code&gt;line&lt;/code&gt;. 
Lets try to think closer to low-level: remove generalizations and just focus on 3 by 3 board:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@winner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operations in Ruby may require some explanation:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; :x&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil //out: evaluated&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil //out: evaluated&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; :x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Conclusion:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#If the expression on the left is truthy it will be the result.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Otherwise; the expression on the right will be the result.&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; :x&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil //out: evaluated&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:x&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;evaluated&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil //out: evaluated&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#Conclusion:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#If the expression on the left is falsey it will be the result.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#Otherwise; the expression on the right will be the result.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Measuring again with the profiler, given exactly the same integration scenario, we see that the &lt;code&gt;winner&lt;/code&gt; method now spends only &lt;strong&gt;9%&lt;/strong&gt; of the total time, which is an immense improvement.&lt;/p&gt;

&lt;p&gt;But, by doing that, we lost the generic properties of the initial algorithm; it will only work for the 3 by 3 board.&lt;/p&gt;

&lt;p&gt;We need to regain the correct behavior independently of the &lt;code&gt;lines&lt;/code&gt;. Generalizing the code will slow us down again. Now, metaprogramming comes in handy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_code_for_winner_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(marks[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] != nil) &amp;amp;&amp;amp; &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(marks[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;] == marks[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]) &amp;amp;&amp;amp; &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;marks[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get_winner_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_code_for_winner_in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; || &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;class_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%Q{&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  def winner&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;    @winner ||= (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_winner_code&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;) || nil&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  end&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we are generating the correct code to handle any type of board. And that code will execute much faster!&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Apr 2015 09:30:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/04/23/optimizing-with-metaprogramming.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/04/23/optimizing-with-metaprogramming.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Uncertainty</title>
        <description>&lt;p&gt;I was trying to make the AI in the tic tac toe game run fast. It was infinitelly slow. I had the hope that by implementing alpha-beta pruning would make it faster. And it did. After that it took about 15 seconds to make a move in the worse case scenario. It was a big improvement from before. But 15 seconds is too much for a user to wait. Something was not working as expected; it should be much faster.&lt;/p&gt;

&lt;p&gt;At that point I was lost. In addition to alpha-beta pruning I tried to use cache to improve the performance, but that did not make any noticeable difference. It was slow! I had no idea about what was wrong with it. I was overwhelmed by the problem and the situation. I really hate that situation.&lt;/p&gt;

&lt;p&gt;After disconnecting from the problem for a day or two I was ready to face it again. Now with fresh thoughts. With that and more research on optimised algorithms for tic tac toe I realised that my implementation was only pruning half of what it could. What a stupid mistake! Fixing that improved the speed a lot. And then I decided to use properly the tool for this job: &lt;a href=&quot;https://github.com/ruby-prof/ruby-prof&quot;&gt;a profiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The information provided by the profiler pointed to the places where most of the time was spent. Having that precise feedback I was able to try different alternatives and see the difference they made. Now I was making progress! No more uncertainty.&lt;/p&gt;

&lt;p&gt;The lesson learned here is: when lost, the things that will help you get through that are: disconnecting from the problem and resting, conversations with fellow programmers, researching for information and using tools to get more feedback on your situation. Seem obvious, but in the middle of a tough situation is harder to realise it.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Apr 2015 11:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/04/22/uncertainty.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/04/22/uncertainty.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Obscure algorithms</title>
        <description>&lt;p&gt;I’ve been implementing this tic tac toe AI that needs to play in a 4 by 4 board.
It has to be perfect. It has to be fast. And the combination of those things is what makes it difficult.&lt;/p&gt;

&lt;p&gt;One of the problems is that if you use a simple recursive algorithm to analise all the combinations in the game, it will take forever in a 4 by 4 board. They are too many combinations. So, you have to find ways to do less processing. The one I chose was to implement &lt;a href=&quot;http://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning&quot;&gt;minimax with alpha-beta pruning&lt;/a&gt;. But that algorithm is too technical and too academic for someone who has no deep understanding on mathematics like me.&lt;/p&gt;

&lt;p&gt;Because I needed to implement it in a way that I could be sure it was going to work as expected, I first had to understand what I was trying to do. Understanding why the algorithm works is an interesting challenge.
If you haven’t seen &lt;a href=&quot;http://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning&quot;&gt;alpha-beta pruning&lt;/a&gt; before, try to make sense out of what alpha and beta mean and how they work in that context. They are names that depend very heavily on the reader to understand uncommon concepts. I still don’t know the real mathematic meaning behind them.&lt;/p&gt;

&lt;p&gt;Like most algorithms, the mechanics are very logical and human-like thinking. But the notation and implementation obscures very heavily that meaning.
After spending a full day of work trying to make sense out of it I got an idea. You don’t need any mathematics to understand it. You only need to be human and have a bit of logic.&lt;/p&gt;

&lt;p&gt;Minimax is based on the thinking that I’m going to choose the best option that I have available and that I can suppose the opponent is going to choose the worse option for me. If the opponent chooses something less bad, that’s better for me.&lt;/p&gt;

&lt;p&gt;Given those decisions, I know that I am not going to choose the options that are worse for me.
So, if I have the option to choose between a draw or a lose, as soon as I know a path gives the opponent the chance to defeat me I don’t need to look further: I prefer the draw for now. Similarly, I don’t need to look further into the paths that are not going to improve a previous alternative.&lt;/p&gt;

&lt;p&gt;If the opponent can choose between a path that may give me a better outcome than other alternatives, the opponent is going to choose an alternative. As soon as I know the opponent is not going to choose that path with better outcome for me I can stop looking further.&lt;/p&gt;

&lt;p&gt;Also, if the opponent has the chance to win, no other option that he may choose is going to be worse than that. As soon as I know he may win, I can stop looking for more options that he may choose in that situation. And the opposite also applies: If I know I can choose to win, I can stop looking for alternatives: I know I’m going to choose to win.&lt;/p&gt;

&lt;p&gt;That’s it, nothing less and nothing more.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/04/21/obscure-algorithms.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/04/21/obscure-algorithms.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
  </channel>
</rss>
