<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The journey of a restless mind</title>
    <description>A personal blog about my experience as a resident apprentice at 8th Light
</description>
    <link>http://demonh3x.github.io//</link>
    <atom:link href="http://demonh3x.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Mar 2015 16:21:31 +0000</pubDate>
    <lastBuildDate>Fri, 27 Mar 2015 16:21:31 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Indirection</title>
        <description>&lt;p&gt;I was working on the ruby &lt;a href=&quot;http://en.wikipedia.org/wiki/Tic-tac-toe&quot;&gt;tic tac toe&lt;/a&gt; exercise with the &lt;a href=&quot;http://en.wikipedia.org/wiki/Minimax&quot;&gt;minimax&lt;/a&gt; algorithm. And I started by TDDing the minimax algorithm directly through the payoff score for each given board state. That way I had a class with the algorithm but that class was not conforming to the &lt;code&gt;Player&lt;/code&gt; contract. So, I had to create a &lt;code&gt;PerfectPlayer&lt;/code&gt; class that conforms with the &lt;code&gt;Player&lt;/code&gt; contract and uses the &lt;code&gt;Minimax&lt;/code&gt; strategy.&lt;/p&gt;

&lt;p&gt;Because there is also a random player, both algorithms can be abstracted to a &lt;code&gt;Strategy&lt;/code&gt; layer. That means that the &lt;code&gt;Player&lt;/code&gt; can become an &lt;a href=&quot;http://en.wikipedia.org/wiki/Adapter_pattern&quot;&gt;adapter&lt;/a&gt; from &lt;code&gt;Strategy&lt;/code&gt; to &lt;code&gt;Player&lt;/code&gt;. With that, we have:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game (1 class)&lt;/strong&gt; -&lt;em&gt;uses&lt;/em&gt;-&amp;gt; &lt;strong&gt;Player (1 class)&lt;/strong&gt; -&lt;em&gt;uses&lt;/em&gt;-&amp;gt; &lt;strong&gt;Strategy (N classes)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This adds a layer of indirection from &lt;code&gt;Game&lt;/code&gt; to &lt;code&gt;Strategy&lt;/code&gt; called &lt;code&gt;Player&lt;/code&gt;. That layer has a cost in complexity, understanding and maintenance. Unless there is a good reason to keep that, it can be simplified to:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Game (1 class)&lt;/strong&gt; -&lt;em&gt;uses&lt;/em&gt;-&amp;gt; &lt;strong&gt;Player (N classes)&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2015 16:30:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/27/indirection.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/27/indirection.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Codebar</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://codebar.io/&quot;&gt;Codebar&lt;/a&gt; is a free, weekly, software development workshop based in London where voluntary coaches and interested students meet to enhance the community.&lt;/p&gt;

&lt;p&gt;Some of the students have a very basic level. &lt;a href=&quot;http://demonh3x.github.io/8thlight/2015/03/13/kickstart-a-new-language.html&quot;&gt;If you’re conscious about the frustration and difficulties happening at the beginning&lt;/a&gt;, you know that having someone to help you understand and not get frustrated is a really important aspect in that process.&lt;/p&gt;

&lt;p&gt;Today is the third time I go to these workshops as a coach.&lt;/p&gt;

&lt;p&gt;I’m addicted to the joy and satisfaction when I’m able to transform ideas into reality. I also love that thrilling sensation when discovering completely new things.&lt;/p&gt;

&lt;p&gt;Making other people feel those sensations is not the same as experiencing them yourself but it is not that far. I can empathize with them and be infected with their feelings.&lt;/p&gt;

&lt;p&gt;That makes me happy and proud of what they can accomplish.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Mar 2015 18:00:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/25/codebar.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/25/codebar.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>You are not your creations</title>
        <description>&lt;p&gt;Do you remember how magical software seemed before you started programming?&lt;/p&gt;

&lt;p&gt;Do you remember the joy you felt the first time you managed to code that thing that was only in your head?&lt;/p&gt;

&lt;p&gt;Do you remember that feeling of excitement the first day you worked with a team?&lt;/p&gt;

&lt;p&gt;Do you remember how hard it was to take the first critiques on your code?&lt;/p&gt;

&lt;p&gt;Do you remember the painful consequences of bad decisions made in a project?&lt;/p&gt;

&lt;p&gt;Do you remember the pride you felt when you and your team developed your first well-thought application for a client?&lt;/p&gt;

&lt;p&gt;Every professional software developer should have experienced those things. And by going through that process, he/she should have developed a judgment about how to do things. &lt;a href=&quot;https://vimeo.com/26330100&quot;&gt;He/she knows different alternatives and makes a decision about what to do with those (choosing one or postponing the choice)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing is, that judgment is developed like your personality. The same way you develop your personality by experiencing things in all your life, you develop your professional judgment by experiencing things related to your professional life. Everyone has different experiences. Everyone has different judgments. &lt;strong&gt;Each person values differently the things around him/her&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So, when I showed my result on some tasks to a group of other 8th Light-ers – a crowd with very diverse and very developed judgment, as you can imagine – I got a lot of feedback about most of the aspects involved. 
Most of that feedback included the options I already considered and I decided &lt;em&gt;not&lt;/em&gt; to choose. In those moments I had this pessimistic thought: 
&lt;code&gt;Did I make the wrong decisions?&lt;/code&gt; &lt;code&gt;If I did, does that mean that all the invested time and dedication is worthless?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obviously not&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That felt similar to the first occasions I got my code critiqued. As you may have learnt too: &lt;a href=&quot;https://www.google.co.uk/search?q=you+are+not+your+code&quot;&gt;you are not your code&lt;/a&gt;. I was hurt when my decisions were critiqued because &lt;strong&gt;I subconsciously took that personally&lt;/strong&gt;. Although the target was not the code, those decisions led to it. So, in a way, it was another manifestation of the same concept.&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Mar 2015 00:30:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/25/you-are-not-your-creations.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/25/you-are-not-your-creations.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Software craftsmanship [Book]</title>
        <description>&lt;p&gt;I finished reading &lt;a href=&quot;http://books.google.co.uk/books?id=JqJQAAAAMAAA&quot;&gt;Sotware Craftsmanship by Pete McBreen&lt;/a&gt;. Since it is a really big influence to the software industry, I though that would be a good idea to make a blog post with some quotes.&lt;/p&gt;

&lt;h1 id=&quot;the-gossamer-condor&quot;&gt;The Gossamer Condor&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 27&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Paul MacCready’s talk at OOPSLA 1998 he pointed out that his team perfected the Gossamer Condor – the human-powered aircraft that won the Kramer Prize – by flying it and crashing it. Parts that broke were strengthened; parts that didn’t break were made lighter and weaker. Through a very rapid crash-and-fix cycle the team managed to make the Gossamer Condor light enough to fly, yet strong enough not to break while being flown.&lt;/p&gt;

&lt;p&gt;One advantage of the Gossamer Condor over previous manpowered aircraft was the facility with wich it could be modified or repaired. After a crash, it could be returned to flying condition within twenty-four hours, enabling the aircraft to be tested extensively and easily modified.&lt;/p&gt;

&lt;p&gt;MacCready’s talk was inspirational for developers, because it pointed out that creating an evolvable design that can be tested is more effective than trying to create the perfect design on the drawing board.&lt;/p&gt;

&lt;h1 id=&quot;software-engineering-is-for-big-projects&quot;&gt;Software Engineering is for big projects&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 111, 114, 115, 117&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The software engineering approach can produce near-perfect software but is very expensive. That expense is a natural consequence of the many detail reviews, inspections, and cross-checks. If you attempt to speed up the process drastically or cut back costs, you have stopped doing software engineering and are not very likely to produce near-perfect software.&lt;/p&gt;

&lt;p&gt;Software Craftsmanship is a solution to the problem of delivering robust, high-quality applications to users in a relatively short time for reasonable cost. Software engineering is a solution to a different set of problems, involving life- or safety-critical systems, real-time and embedded systems, and systems engineering projects. In these types of problems, fast delivery and reasonable cost are not the driving factors on the project. Incremental development and evolutionary delivery are not feasible strategies.&lt;/p&gt;

&lt;p&gt;In software engineering projects, developing the software sooner doesn’t help if the hardware is still changing rapidly. Craftsmanship is focused on delivering applications on known hardware to known users.&lt;/p&gt;

&lt;p&gt;Small software engineering projects generally tend to be more productive and less risky, than extremelly large projects, but to some extent that can be explained by the difficulty in communicating among large groups of people. The Agile Methodologies focus attention on the individuals in the software development team and the quality of their interactions with their customers and users.&lt;/p&gt;

&lt;h1 id=&quot;best-practices-hinder-process-innovation&quot;&gt;Best practices hinder process innovation&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 125&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Organizations tend to adopt a process more for the purposes of oversight and control than with a view to improving the effectiveness of delivery. They attempt a “one size fits all” approach because it is easier to treat all projects in the same way. The strange result is that teams end up working off-process just to make progress. Sometimes these off-process projects accidentally stumble on a combination of software development practices that allows them to be spectacularly successful compared with the standardized process.&lt;/p&gt;

&lt;p&gt;The software developers deliver the system to a satisfied user community and are fired up and enthusiastic about spreading the word about how good their process is. If they are enthusiastic enough and create an appropiately catchy name, the new process may be adopted by the rest of the company or outside of the company in different projects. Converts to this new process then become enthusiastic and push to have this new process adopted as the “one size fits all” standard.&lt;/p&gt;

&lt;p&gt;The originators of the new process are then places in an awkward position. They understand that they were successful because of the special circumstances of their project that allowed their new process to be successful, yet their converts make claims not backed up by project experience. In many cases, the unfortunate consequence is that the hype wins and the new process is adopted in projects for which it is not suitable.&lt;/p&gt;

&lt;h1 id=&quot;university-degrees-do-not-prepare-students-for-real-projects&quot;&gt;University degrees do not prepare students for real projects&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 95&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;University degrees do not prepare students for real projects. They emphasize the rigorous, technical aspects of software development but fail to cover the important “soft” skills: discuss requirements elicitation techniques or collaborative design.
  Bad teachers set up programming classes to prevent people from asking questions. For example, during a lesson on writing loops, if a student asks a deep question about conditional logic, a typical answer “We will cover that in the next lesson” or “We have already covered that”. Neither response helps the student learn and both state that students should not ask questions.&lt;/p&gt;

&lt;h1 id=&quot;finding-good-developers&quot;&gt;Finding good developers&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 85&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The challenge is finding people who, although already good, have already adopted the tradition of continual learning. The real test, though, is whether the people who work with them have adopted a similar attitude toward learning and improvement.&lt;/p&gt;

&lt;h1 id=&quot;craftsmans-reputation&quot;&gt;Craftsman’s reputation&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 38, 42, 59, 142&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When one developer recommends another developer, he is putting his own reputation on the line. By making it personal, software craftsmanship guarantees that recommendations are never made lightly. This kind of peer recommendations means that everyone involved is constantly striving to improve and to become better developers.&lt;/p&gt;

&lt;p&gt;It also gives users, customers, and managers better information. Rather than just being told that the person is a “certified Web developer” they will be told the real story – how the person actually works and how his projects turn out.&lt;/p&gt;

&lt;p&gt;Any developer could name a few people with whom they have worked in the past and with whom they would jump at the chance of working again. These are the names any developer can give you without any fear of reprisal.&lt;/p&gt;

&lt;p&gt;You also don’t want to ask other managers or customers to recommend someone. Their recommendations are worthless because they have no skin in the game. If the person they recommend doesn’t work out, they may say “sorry”, but that apology will not fix the problem. The people you want to ask are the craftsmen you want but cannot get. Ask them who they would personally recommend. You must be very careful not to push for an answer. If you do, they are no longer responsible for the project outcome because you have insisted on being given names regardless of how good they are.&lt;/p&gt;

&lt;p&gt;You could call this the “Hollywood model” because it is close to the model used in the film industry. It works because the credentials of everyone in the industry are public. The long list of credits at the end of a film are there for everyone to see. In the software development world, only the Open Source community comes close in the terms of openness about taking credit for work. Many software developers have built a very public reputation based on their contributions to Open Source.&lt;/p&gt;

&lt;p&gt;Developers must retain the right to claim authorship in all of the applications they create so that other customers can find out what they have worked on. With that comes the personal responsibility for that application – both its current performance and its future extensibility. That way they learn from their mistakes. If not held accountable for their work nothing is stopping them from making the same mistakes on future projects, because they don’t even know they made a mistake.&lt;/p&gt;

&lt;h1 id=&quot;becoming-a-software-craftsman&quot;&gt;Becoming a Software Craftsman&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 80&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Craftsman taking a complete job from start to finish is the only way to be confident that the work created will meet the needs of their users and customers. Having the same people involved from the initial discussions through maintaining the released application reduces the possibility of misinterpretation. This allows developers to take personal responsibility for both the successes and failures of the system.&lt;/p&gt;

&lt;h1 id=&quot;where-are-all-the-great-developers-of-yesteryear&quot;&gt;Where are all the great developers of yesteryear?&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 74, 150&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Few of those great developers are still developing software. Most have moved on to other activities that provide greater rewards. They had to become managers, enterpreneurs, or researchers to advance. Some have joined the academic world.&lt;/p&gt;

&lt;p&gt;What incentive is there for someone to excel at sofware development if, by the time the person has learned to do it well, he must find an alternate career?&lt;/p&gt;

&lt;h1 id=&quot;estimates&quot;&gt;Estimates&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;quote from pages: 137&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Customers and managers do not want to believe the initial estimates. It is as if the “sticker shock” of seeing the initial estimate pushes people into negotiating mode. Despite the evidence that the estimate is an outcome of the project parameters.&lt;/p&gt;

&lt;p&gt;Customers and managers seem to persist in believing that it is possible to negotiate for a lower estimate without changing the project parameters. You can negotiate for a lower estimate, but the new estimate will be inaccurate. It is lower, but the project will still take as long as the original estimate (or sometimes longer, because in hurrying the team make mistakes).&lt;/p&gt;

&lt;p&gt;Craftsmen always have to negotiate on the project parameters and then report the effect that this has on the estimate. The strongest argument a craftsman has is her reputation for on-time delivery of robust, high-quality applications, and it is never worth blowing a reputation by shaving an estimate just to get a project.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 15:30:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/books/2015/03/19/sotware-craftsmanship.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/books/2015/03/19/sotware-craftsmanship.html</guid>
        
        
        <category>8thlight</category>
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Estimating II</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/04/20/Why-Is-Estimating-So-Hard.html&quot;&gt;Estimating is hard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://skim.la/&quot;&gt;Steve Kim&lt;/a&gt;, my mentor, after reading my &lt;a href=&quot;http://demonh3x.github.io/8thlight/2015/03/06/estimating.html&quot;&gt;first post about estimating&lt;/a&gt; sent me a link to a &lt;a href=&quot;http://blog.8thlight.com/paul-pagel/FromEstimateToCommitment.pdf&quot;&gt;document from Paul Pagel about that topic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I mentioned in my &lt;a href=&quot;http://demonh3x.github.io/8thlight/2015/03/06/estimating.html&quot;&gt;first post about estimating&lt;/a&gt; that my original way of thinking pessimistically results in – what I thought – very exaggerated estimations. That is a result of the insecurity in myself and the unknown future.&lt;/p&gt;

&lt;p&gt;In my last IPM I estimated pessimistically as &lt;code&gt;It should not take more than X time to do it&lt;/code&gt;. It turned out as a &lt;strong&gt;complete failure&lt;/strong&gt;. It is true that filling that &lt;code&gt;X&lt;/code&gt; makes me value the time I spend in a task. But it will not be a valid estimation because it doesn’t represent the time it will &lt;strong&gt;actually take me&lt;/strong&gt; to do it. A valid pessimistically estimation needs to include the uncertainty and my insecurity.&lt;/p&gt;

&lt;p&gt;By making that mistake I understood one of the reasons why I feel really uncomfortable estimating: I like to keep my promises. Estimating feels like a promise, even though &lt;a href=&quot;https://signalvnoise.com/posts/2136-its-not-a-promise-its-a-guess&quot;&gt;it shouldn’t because it is a guess&lt;/a&gt;.
Not meeting an estimation hurts me. By estimating a task in a time-frame that I will not be able to achieve I am destroying my honor and trust. I am a worthless professional if no one trusts me.&lt;/p&gt;

&lt;p&gt;And I know &lt;strong&gt;now&lt;/strong&gt; why I didn’t see that failure coming.&lt;/p&gt;

&lt;p&gt;Pressure blinds your perception and judgment. Of course the client is going to apply pressure: he/she wants the application as soon as possible and as cheap as possible but without reducing the quality nor the features.
The client may think that the estimation is something negotiable. Because of that, you can estimate differently, but then that estimation will not be as accurate as your original estimation. The real development will take the same time independently of your estimation.
The only way to reduce the amount of time an application is going to take to develop is by negotiating the features of it. That doesn’t mean the application is going to be inferior, it means that &lt;a href=&quot;https://kunuk.files.wordpress.com/2014/10/minimum-viable-product2.png&quot;&gt;we are going to analise what are the really important aspects of those features so we can prioritize them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.fesere.de/&quot;&gt;Felipe Sere&lt;/a&gt;, my co-mentor, helped me remember those things. I already knew most of them, I was applying them in the applications I have been involved. Then, why I didn’t apply them this time?&lt;/p&gt;

&lt;p&gt;I am in a completely new environment.
New country, new team, new everyday language, new way of life, no old friends nor family near. And the most influential one: new role. I was no longer the one that guides, I am being guided. I was no longer providing value, I am an apprentice. Everything I thought is the right thing is being questioned.&lt;/p&gt;

&lt;p&gt;Because of that I was not thinking of the IPMs with &lt;a href=&quot;http://skim.la/&quot;&gt;Steve&lt;/a&gt; as client-simulation scenarios. I was thinking of them as mentor-pushing scenarios. So when he applied &lt;em&gt;“client pressure”&lt;/em&gt; I trusted his decision of – what I interpreted as the mentor – pushing me beyond my possibilities. I was caught off-guard.&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Mar 2015 22:30:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/15/estimating-2.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/15/estimating-2.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Common ground</title>
        <description>&lt;p&gt;There is a lot of emphasis at the begining of an apprenticeship on a set of skills and tools that everyone else in the team already knows and uses everyday.
As a part of a team, you need to be able to pair with anyone and in a way that you both are comfortable doing it.&lt;/p&gt;

&lt;p&gt;Some skills or tools might sound obvious, others not so much.&lt;/p&gt;

&lt;h1 id=&quot;touch-typing&quot;&gt;Touch typing&lt;/h1&gt;

&lt;p&gt;This one is quite obvious.&lt;/p&gt;

&lt;p&gt;I never learned how to properly touch type. But because I used computers from the age of 12 I am able to type quite quickly and precisely without having the &lt;em&gt;“correct”&lt;/em&gt; technique. Maybe if I develop the proper technique I would type faster and with more precision, but I don’t think the difference would be that significant.&lt;/p&gt;

&lt;h1 id=&quot;us-keyboard&quot;&gt;US keyboard&lt;/h1&gt;

&lt;p&gt;Most of the team members have the US keyboard. The rest who don’t have it, have the OS configured to use the US distribution and know how to use it fluently.&lt;/p&gt;

&lt;p&gt;I come from a Spanish keyboard.
Both are QWERTY distributions, so almost all the letters are in the same position. That is good because I don’t have to re-learn anything of that.
But almost all the symbols are in another position. So I had to re-train my movements when thinking of the symbols. Which is a bit difficult to do because I had to override what I’ve been doing for the past 16 years.&lt;/p&gt;

&lt;h1 id=&quot;vim&quot;&gt;Vim&lt;/h1&gt;

&lt;p&gt;Vim is a text editor that is available by default in most Linux distributions and in Mac OS.
Besides that, it is a very lightweight and flexible tool. Almost everything can be customized and extended via plug-ins.
Almost everyone in the team uses it for everyday coding.&lt;/p&gt;

&lt;p&gt;I’ve used it a bit before this apprenticeship, but only enough to not be lost in the modes. Nothing about being efficient in its usage. Each day I learn how to use a new feature that makes me more efficient using it.&lt;/p&gt;

&lt;h1 id=&quot;tmux&quot;&gt;Tmux&lt;/h1&gt;

&lt;p&gt;Tmux enable you to have multi-tasking in a shell. If you don’t want to get stuck with a single process, you need a tool like this one.&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Mar 2015 17:30:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/collaborating/2015/03/14/common-ground.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/collaborating/2015/03/14/common-ground.html</guid>
        
        
        <category>8thlight</category>
        
        <category>collaborating</category>
        
      </item>
    
      <item>
        <title>Kickstart a new language</title>
        <description>&lt;p&gt;When learning a new language you are going to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make a lot of mistakes.&lt;/li&gt;
  &lt;li&gt;get stuck with a lot of things you don’t know yet.&lt;/li&gt;
  &lt;li&gt;feel again you know nothing about programming.&lt;/li&gt;
  &lt;li&gt;use the documentation, tutorials and examples.&lt;/li&gt;
  &lt;li&gt;experiment a lot to fully understand the concepts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The time you spend in that process is an investment.
You are going to be a better programmer because of it.&lt;/p&gt;

&lt;p&gt;Let’s imagine the following scenario: You have written some code and after executing it, you find that there is a mistake in it (syntax, behaviour or something else).
You spent 20 minutes writing the code, 10 more finding where the problem is and another 10 fixing it.
That’s 40 minutes to try a simple thing.&lt;/p&gt;

&lt;p&gt;Those mistakes are inevitable. They are part of the learning process.
But, is really necessary to spend that amount of time to learn from that mistake? Are the extra 20 minutes of searching for the mistake and fixing it really necessary?
You already know the basics. How can you spend only the necessary amount of time learning what you don’t know yet?&lt;/p&gt;

&lt;p&gt;It helps a lot if you are conscious of when and why you are losing time you don’t need to.&lt;/p&gt;

&lt;p&gt;The two main aspects I know that influence the process are: the feedback loop and the source of knowledge.&lt;/p&gt;

&lt;h2 id=&quot;feedback-loop&quot;&gt;Feedback loop&lt;/h2&gt;

&lt;p&gt;By feedback loop I mean the amount of time between the moment you make a mistake and the moment you realize you made a mistake.&lt;/p&gt;

&lt;p&gt;If you have a slow feedback loop, you are going to be losing time.
The ideal scenario would be to know the mistake you made exactly at the same moment you made it.
That would be similar to having a pair that knows really well the language constantly looking at the code you are writing.&lt;/p&gt;

&lt;p&gt;Having tools like testing frameworks and automating those tests to run as frequently as possible is one way to speed up the feedback loop.&lt;/p&gt;

&lt;p&gt;Using a repl is another way of speeding up the feedback loop.&lt;/p&gt;

&lt;h2 id=&quot;source-of-knowledge&quot;&gt;Source of knowledge&lt;/h2&gt;

&lt;p&gt;Another significant factor is the source of knowledge.&lt;/p&gt;

&lt;p&gt;At some point you are going to need information about something you don’t understand or don’t know.&lt;/p&gt;

&lt;p&gt;The usual way is looking at the documentation or search in the Internet. But to do that you need to know the thing you are looking for. Most of the times, the concepts you are trying to learn are new or have a different name to refer to them. So, because you don’t know how to look for it, is hard to find the precise information you want.&lt;/p&gt;

&lt;p&gt;The most efficient way is having a person who already knows the language so he/she can explain the concepts with the amount of conciseness you need and when you need it.
But that is not always possible.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Mar 2015 17:00:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/13/kickstart-a-new-language.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/13/kickstart-a-new-language.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Extreme Startup</title>
        <description>&lt;p&gt;On Friday afternoon we did a session of &lt;a href=&quot;https://github.com/rchatley/extreme_startup&quot;&gt;Extreme Startup&lt;/a&gt;. It is a competitive programming game.&lt;/p&gt;

&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Each participant has to implement a web API that responds to not-yet-known questions.
There is an API client acting as a referee that asks those questions every few seconds and keeps track of the points for each participant.&lt;/p&gt;

&lt;p&gt;Each participant:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gets points if the API responds correctly to a question.&lt;/li&gt;
  &lt;li&gt;Loses some points if the API responds incorrectly to a question.&lt;/li&gt;
  &lt;li&gt;Loses a lot of points if the API is not working when asked a question.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The referee machine also is a web server where each participant can see the if the API has responded correctly, incorrectly or was not working when asked a question. It also has the game scoreboard.&lt;/p&gt;

&lt;h2 id=&quot;our-approach&quot;&gt;Our approach&lt;/h2&gt;

&lt;p&gt;I participated with &lt;a href=&quot;http://c-j-j.github.io/&quot;&gt;Chris Jordan&lt;/a&gt;.
The first thing we thought was: We want to test drive this. How are we going to test our code without the web server nor the referee?&lt;/p&gt;

&lt;p&gt;To do that we created a function that received the question and returned the answer.
We tested that function with questions we were loging as the referee was doing them.
That function knew nothing about web stuff.
On the other hand, the web server code received the web request, extracted the question, passed it to the function and formatted the response with the answer.&lt;/p&gt;

&lt;p&gt;That way we had a feedback loop much faster than the real environment. We didn’t have to wait &lt;code&gt;random number&lt;/code&gt; seconds for the referee to ask the question we wanted to implement. We were &lt;strong&gt;simulating&lt;/strong&gt; the real environment.&lt;/p&gt;

&lt;h2 id=&quot;consequences&quot;&gt;Consequences&lt;/h2&gt;

&lt;p&gt;Everything was wonderful. We rapidly got way ahead of everyone else because of that rapid feedback.&lt;/p&gt;

&lt;p&gt;But our server broke when asked questions it did not expect, so we added some exception handling code to the untested part and thought that would be OK. It was OK for some time, until we started losing some of the advantage.&lt;/p&gt;

&lt;p&gt;At the end, &lt;a href=&quot;http://www.dirv.me/&quot;&gt;Daniel Irvine&lt;/a&gt; and &lt;a href=&quot;http://indykid.github.io/&quot;&gt;Jarkyn Soltobaeva&lt;/a&gt;, who were at 2nd position, surpassed us.
We didn’t know why. Our tests passed!&lt;/p&gt;

&lt;p&gt;The worst part is not knowing. We still don’t know exactly why. Our tests were very &lt;a href=&quot;https://www.facebook.com/notes/kent-beck/making-making-manifesto/857477870951745&quot;&gt;narrow in scope&lt;/a&gt; because we were &lt;strong&gt;simulating&lt;/strong&gt; the real environment.&lt;/p&gt;

&lt;p&gt;We were not looking to the &lt;strong&gt;real world&lt;/strong&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Mar 2015 22:00:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/08/extreme-startup.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/08/extreme-startup.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Estimating</title>
        <description>&lt;p&gt;To assign tasks we are doing iteration planning meetings (IPMs). In those, we specify which tasks I have to do next. The tracking of those tasks is done in a &lt;a href=&quot;http://en.wikipedia.org/wiki/Kanban_board&quot;&gt;kanban board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then I have to estimate how much time I think they are going to take. The time units are half day of work. That means that 2 units are a full day of work (8 hours). The time units are not divisible. And an estimation can’t be 0 time units. That estimation is based on 3 points of view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Being optimistic.&lt;/li&gt;
  &lt;li&gt;Being realistic.&lt;/li&gt;
  &lt;li&gt;Being pessimistic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am noticing that maybe I am being pessimistic by default. 
Optimistic, realistic and pessimistic seem subjective thoughts. I can’t estimate with subjective thoughts, they are unreliable. So I have to find a more objective way of thinking about it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To achieve that task, what are the steps I have to take?&lt;/li&gt;
  &lt;li&gt;Do I have some experience in some of the steps? How much time did they take?&lt;/li&gt;
  &lt;li&gt;Optimistic: Everything goes really smooth, there are no interruptions, full focus on the task…&lt;/li&gt;
  &lt;li&gt;Realistic: Considering some interruptions, some moments when one can’t focus properly, maybe I missed one or two steps to complete the task…&lt;/li&gt;
  &lt;li&gt;Pessimistic: I got my assumptions wrong. There are missed steps to complete the task that I did not think of. I am being interrupted often. I can’t focus on the task. I will dedicate out-of-work time to keep up…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem of thinking pessimistically that way is that my estimations are very exaggerated.
I had to think about it from other point of view: It should not take more than X time to do it.
Thinking of it that way made me value the time I was spending in a task.&lt;/p&gt;

&lt;p&gt;On the other hand. If I have never done anything similar enough to the step I’m trying to estimate, How am I supposed to know the time is going to take to do it?&lt;/p&gt;

&lt;p&gt;I feel really uncomfortable estimating, that means I need to improve on it.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Mar 2015 10:00:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/2015/03/06/estimating.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/2015/03/06/estimating.html</guid>
        
        
        <category>8thlight</category>
        
      </item>
    
      <item>
        <title>Optimizing the communication</title>
        <description>&lt;p&gt;This entry is about this week’s task.&lt;/p&gt;

&lt;p&gt;The task consisted in being able to do the &lt;code&gt;Coin Changer&lt;/code&gt; kata driven by tests in Ruby and using Vim. All of that under 7 minutes.&lt;/p&gt;

&lt;p&gt;I heard once a person say: “Those craftsmen/craftswomen doing katas super-fast only want to show off. That practice is completely pointless.”&lt;/p&gt;

&lt;p&gt;In order to be able to do this task, you need to communicate with the computer efficiently.&lt;/p&gt;

&lt;p&gt;I introduce next the &lt;code&gt;Abstract concept&lt;/code&gt; and &lt;code&gt;An analogy&lt;/code&gt; about communicating. You can skip those parts and go to &lt;code&gt;Analyzing the task’s aspects&lt;/code&gt; section if you want.&lt;/p&gt;

&lt;h2 id=&quot;abstract-concept&quot;&gt;Abstract concept&lt;/h2&gt;
&lt;p&gt;When a sender wants to communicate some information to a receiver, some prerequisites need to exist for that communication to be successful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The sender needs to know clearly the information he/she wants to communicate.&lt;/li&gt;
  &lt;li&gt;They both need to be able to understand and express ideas with a common language.&lt;/li&gt;
  &lt;li&gt;As important as the details of the language are, the speed at which both parts can communicate is also important.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;an-analogy&quot;&gt;An analogy&lt;/h2&gt;
&lt;p&gt;Lets put the Spanish spoken language as an analogy.&lt;/p&gt;

&lt;p&gt;If the speaker doesn’t know what he/she wants to communicate, there is no point in trying to speak in any language. The more concise the information is, the better. When the speaker uses too many words to say something, he/she may create confusion to the listener.&lt;/p&gt;

&lt;p&gt;The details of the language may vary depending on the zone it is spoken.
It is not exactly the same Spanish spoken in Madrid than the one spoken in Mexico city.
If there is a word that means one thing in Madrid another thing in Mexico city, and you want a perfect communication, the speaker and the listener need to know which meaning they are referring to when using that word. Otherwise there is going to be confusion. 
If they notice something was confused, solving that confusion (if they can) really slows down the communication.&lt;/p&gt;

&lt;p&gt;The speed at which a person can understand spoken Spanish might be a problem.
If the speaker is forced to speak too slow or the listener needs the speaker to repeat the message too many times, the speaker can become frustrated and even stop trying to communicate.&lt;/p&gt;

&lt;p&gt;The speed at which a person can speak Spanish is also a limiting factor. 
It is quite difficult if the speaker’s head thinks faster than his/her mouth can articulate words.
Even worse: it is really frustrating when the speaker wants to say something but can’t find the words and combine them to say that thing precisely. The best he/she can do in that case is to say something somewhat similar hoping that the listener understands the idea.&lt;/p&gt;

&lt;p&gt;The precision at which a person can speak Spanish is another important thing to consider.
The person might be, for example, stuttering when speaking Spanish. That makes him/her to be constantly correcting himself/herself and take more time than usual to say something. It could also confuse the listener.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-tasks-aspects&quot;&gt;Analyzing the task’s aspects&lt;/h2&gt;
&lt;p&gt;I introduced the analogy because it has a lot of similarities with the process I faced doing this task. I will explain them as they appear.&lt;/p&gt;

&lt;p&gt;To achieve this task, there are many aspects to develop. Lets identify them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Understanding, solving and simplifying the problem&lt;/li&gt;
  &lt;li&gt;Ruby syntax&lt;/li&gt;
  &lt;li&gt;TDD&lt;/li&gt;
  &lt;li&gt;Vim usage&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those aspects are ordered by their priority in the objective of achieving the task.
It does not make sense to learn Ruby syntax if you don’t know how to face the problem yet.
It does not make sense to learn RSpec (to do TDD) if you don’t know the Ruby syntax yet.
It does not make sense to use another text editor to go faster if you are struggling with the problem, with the Ruby syntax or with the TDD procedure.&lt;/p&gt;

&lt;p&gt;This doesn’t mean you have to master each aspect before getting into the next one. It only means that improving a previous aspect has more time profit than improving on following ones.&lt;/p&gt;

&lt;h1 id=&quot;understanding-solving-and-simplifying-the-problem&quot;&gt;Understanding, solving and simplifying the problem&lt;/h1&gt;
&lt;p&gt;Lets start by understand what is the problem we are trying to solve.&lt;/p&gt;

&lt;p&gt;The problem is about calculating the optimal combination of &lt;a href=&quot;http://en.wikipedia.org/wiki/Coins_of_the_pound_sterling#Coins_in_circulation&quot;&gt;UK coins&lt;/a&gt; for a money amount. Optimal means that the bigger coins are preferred. The notes are not considered. For example: given £5.98, the coins should be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Two £2 coins&lt;/li&gt;
  &lt;li&gt;A £1 coin&lt;/li&gt;
  &lt;li&gt;A £0.50 coin&lt;/li&gt;
  &lt;li&gt;Two £0.20 coins&lt;/li&gt;
  &lt;li&gt;A £0.05 coin&lt;/li&gt;
  &lt;li&gt;A £0.02 coin&lt;/li&gt;
  &lt;li&gt;A £0.01 coin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href=&quot;https://gist.github.com/demonh3x/2f41e9ce5ae0897e0e00&quot;&gt;one of my firsts solutions&lt;/a&gt; I introduced some &lt;a href=&quot;https://vimeo.com/79106557&quot;&gt;accidental complication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I thought the problem needed the notes to be considered. I did not understand the problem. By not considering them I simplified the problem and saved some time.&lt;/p&gt;

&lt;p&gt;I made a class with an instance method. That method did not depend on any state of the instance. The result only depends on the parameter. By defining that function without a class I simplified the problem and saved some time.&lt;/p&gt;

&lt;p&gt;I used floating point numbers for the coins. That has problems with precision which I solved using BigDecimal. By using integers instead of floating point numbers I simplified the problem and saved some time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Going back to the analogy: this is knowing what I want to say and being concise doing it.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;ruby-syntax&quot;&gt;Ruby syntax&lt;/h1&gt;
&lt;p&gt;The Ruby syntax is similar to other programming languages but it has it peculiarities. I needed to know which differences has and what they mean before continuing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Going back to the analogy: this is specifying that we are going to use the Madrid’s Spanish instead of Mexico’s.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Interactive_Ruby_Shell&quot;&gt;irb&lt;/a&gt; is a great tool to learn the ruby syntax and to experiment with it. 
The more familiarized you are with the syntax, the faster you can express what you want. By searching in the documentation, experimenting and practicing I became more familiar with the syntax and faster writing it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Going back to the analogy: this is finding the words and combining them properly to say that thing precisely.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The coding style is another thing to keep in mind if you don’t want to create confusion.&lt;/p&gt;

&lt;h1 id=&quot;tdd&quot;&gt;TDD&lt;/h1&gt;
&lt;p&gt;TDD here is a communication enhancer. It makes the communication from the computer to you go much faster. Instead of running the code, trying the different combinations and checking manually, you have all the features tested automatically. You just have to run the tests.&lt;/p&gt;

&lt;p&gt;That makes the computer tell you if you are doing something wrong, what are you doing wrong and when you are doing it wrong. 
You can go back a bit and try to do it differently. 
That is quite grumpy, isn’t it? It would be interesting if the computer also suggested valid alternatives, but that is out of my knowledge and seems &lt;a href=&quot;https://twitter.com/ianbach/status/564938305251192832&quot;&gt;magical&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The speed of the communication between the programmer and the computer is the time difference between the moment you write code and the computer tells you everything is OK.
The more frequent you run the tests, the faster the communication is.
By automating the execution of the tests after saving, I made the communication faster.&lt;/p&gt;

&lt;p&gt;If I would need to improve this, I would follow &lt;a href=&quot;https://twitter.com/KentBeck/status/570682400948260864&quot;&gt;Kent’s suggestion&lt;/a&gt; by running the tests each time a key is pressed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Going back to the analogy: this is making the listener to understand and respond faster.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html&quot;&gt;transformation priority premise&lt;/a&gt; suggests you do the steps that require less effort first. By doing that, the code was evolving smoother and faster.&lt;/p&gt;

&lt;h1 id=&quot;vim-usage&quot;&gt;Vim usage&lt;/h1&gt;
&lt;p&gt;At some point, if you are really comfortable with the previous aspects, the text editor may get in the way of transmitting the information to the computer.&lt;/p&gt;

&lt;p&gt;Learning to use vim feels counterintuitive. Just to get as productive in vim as in your current text editor, you have to learn a lot of shortcuts and be comfortable with the modes. That takes time and practice.
&lt;a href=&quot;http://vim-adventures.com/&quot;&gt;Vim Adventures&lt;/a&gt; is an interesting way to learn it.&lt;/p&gt;

&lt;p&gt;Why is writing in vim faster than in a graphical text editor? That’s because almost all the actions are as easy as pressing a letter. That makes your hands not to lose time moving to the mouse or arrows and then lose more time going back to the writing position.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Going back to the analogy: this is making your mouth articulate words faster to keep up with the thoughts in your head.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You have to be careful to learn properly the  actions. Because if you learn that moving a finger to press a key to do an action, but that key doesn’t do that action, you are going to be correcting yourself very often and losing time because of it. By polishing my finger moves I saved some time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Going back to the analogy: this is stuttering while trying to say something.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/121234763&quot; width=&quot;500&quot; height=&quot;313&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/121234763&quot;&gt;Coin Changer Kata&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/user33522377&quot;&gt;Mateu Adsuara&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s 5 minutes 15 seconds. And there is yet room for improvement.&lt;/p&gt;

&lt;p&gt;Remember: 
&lt;code&gt;Strive for progress, not perfection&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Mar 2015 15:00:00 +0000</pubDate>
        <link>http://demonh3x.github.io//8thlight/vim/ruby/kata/2015/03/05/optimizing-the-communication.html</link>
        <guid isPermaLink="true">http://demonh3x.github.io//8thlight/vim/ruby/kata/2015/03/05/optimizing-the-communication.html</guid>
        
        
        <category>8thlight</category>
        
        <category>vim</category>
        
        <category>ruby</category>
        
        <category>kata</category>
        
      </item>
    
  </channel>
</rss>
